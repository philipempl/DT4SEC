<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Security-Aware Virtual Environments for Digital Twins</title>
			</titleStmt>
			<publicationStmt>
				<publisher>ACM</publisher>
				<availability status="unknown"><p>Copyright ACM</p>
				</availability>
				<date type="published" when="2018-05-22">2018-05-22</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Matthias</forename><surname>Eckhart</surname></persName>
							<email>matthias.eckhart@tuwien.ac.at</email>
							<affiliation key="aff0">
								<orgName type="department">Inst. of Information Systems Engineering</orgName>
								<orgName type="institution" key="instit1">Christian Doppler Laboratory &quot;SQI&quot;</orgName>
								<orgName type="institution" key="instit2">TU Wien Vienna</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Andreas</forename><surname>Ekelhart</surname></persName>
							<email>andreas.ekelhart@sba-research.org</email>
							<affiliation key="aff1">
								<orgName type="institution">SBA Research Vienna</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Security-Aware Virtual Environments for Digital Twins</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 4th ACM Workshop on Cyber-Physical System Security</title>
						<meeting>the 4th ACM Workshop on Cyber-Physical System Security						</meeting>
						<imprint>
							<publisher>ACM</publisher>
							<date type="published" when="2018-05-22" />
						</imprint>
					</monogr>
					<idno type="DOI">10.1145/3198458.3198464</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.2" ident="GROBID" when="2021-06-09T12:32+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Cyber-physical systems</term>
					<term>industrial control systems</term>
					<term>digital twin</term>
					<term>simulation</term>
					<term>security monitoring</term>
					<term>AutomationML</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Digital twins open up new possibilities in terms of monitoring, simulating, optimizing and predicting the state of cyber-physical systems (CPSs). Furthermore, we argue that a fully functional, virtual replica of a CPS can also play an important role in securing the system. In this work, we present a framework that allows users to create and execute digital twins, closely matching their physical counterparts. We focus on a novel approach to automatically generate the virtual environment from specification, taking advantage of engineering data exchange formats. From a security perspective, an identical (in terms of the system's specification), simulated environment can be freely explored and tested by security professionals, without risking negative impacts on live systems. Going a step further, security modules on top of the framework support security analysts in monitoring the current state of CPSs. We demonstrate the viability of the framework in a proof of concept, including the automated generation of digital twins and the monitoring of security and safety rules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CCS CONCEPTS</head><p>• Security and privacy → Intrusion detection systems; • Computer systems organization → Embedded and cyber-physical systems;</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>(e.g., computing hardware/software) and physical (e.g., actuators) components, allowing the system to interact with the real world <ref type="bibr" target="#b3">[4]</ref>. Moreover, CPSs can integrate networking capabilities, a feature that is a cornerstone of interconnected and autonomously operating manufacturing systems.</p><p>However, increased digitization and connectivity open up new attack vectors that may not only put an organization's assets at risk, but could also endanger human life. This is especially important for industrial control systems (ICSs) -a subset of CPSswhere safety has been the main focus. In this context, it should be noted that security issues can lead to safety implications. In fact, the lack of adequate measures to secure CPSs in critical infrastructures (e.g., sewage treatment plants <ref type="bibr" target="#b30">[30]</ref>) could even have severe consequences for public safety <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b21">22]</ref>.</p><p>Security testing, monitoring, and intrusion detection, as defined in industrial standards and guidelines such as IEC 62443 <ref type="bibr" target="#b13">[14]</ref> and NIST SP 800-82 <ref type="bibr" target="#b31">[31]</ref>, are important measures to fortify industrial environments. Due to the criticality of the running systems, testing in the production environment is not recommended. The setup and maintenance of test environments on the other hand, is expensive and time consuming, often leading to incomplete and outdated environments. A similar issue can be identified with focus on the evaluation of research results in this domain. As an example, intrusion detection in CPS got much attention over the past years, but the evaluation datasets are frequently not published and the cyber-physical setup cannot be reproduced most of the time. This hinders adoption and independent comparison <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b23">24]</ref>.</p><p>In this paper, we propose a novel framework named CPS Twinning to build and maintain fully functional digital twins of CPSs. The term "Digital Twin" was coined by Shafto et al. <ref type="bibr" target="#b29">[29]</ref> and describes the use of holistic simulations to virtually mirror a physical system <ref type="bibr" target="#b26">[26]</ref>. Adopting such a concept could enable operators to monitor the production process, test changes in a virtual, isolated environment, and to further strengthen the security and safety of CPSs.</p><p>A recent study by Rubio et al. <ref type="bibr" target="#b27">[27]</ref> suggests that a virtual replica of the physical process may be leveraged for security purposes, however, leading to new issues concerning the creation and management as a consequence thereof. While the manual creation of a virtual environment for digital twins is time consuming and errorprone, we want to produce the environment completely from specification. This approach is efficient, reusable, and moreover, guarantees an identical setup. Ideally, the specification of the CPS is already defined and maintained as part of the system engineering process <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref> by means of standardized data formats, such as AutomationML (AML) <ref type="bibr" target="#b9">[10]</ref>.</p><p>We consider two main modes of operation of the virtual environment, either (i) in a simulation mode, operating independently of the physical environment, offering the possibility to monitor and explore a virtual clone without risk, or (ii) in a replication mode, replaying the events from the physical environment for visualization and analysis. On top of this virtual representation, multiple security features can be established. For example, security and safety rules stated as part of the specification can be automatically monitored on the basis of digital twins. In addition, new physical devices can be connected and tested in the virtual environment, without influencing production systems. Security testers also have the possibility to freely explore and attack a virtual replication of the production setup. With this approach, security can be seamlessly integrated in the entire production lifecycle, starting from the engineering phase.</p><p>The novel contributions of this paper can be summarized as follows:</p><p>• We propose a framework that provides a security-aware environment for digital twins. • We demonstrate the feasibility of the proposed framework by providing a prototypical implementation, supporting the virtual replication of the network topology, programmable logic controllers (PLCs) and their control logic, human machine interfaces (HMIs), and physical devices (e.g., motor). To accelerate the development of this prototype, we integrated two existing open-source tools. • We show how such virtual environments for digital twins can be automatically generated from specification (e.g., AML). • We introduce security relevant use cases for digital twins in CPSs and show how security and safety rules can be monitored.</p><p>The remainder of the paper is organized as follows. First, in Section 2, we motivate the need for a security-aware virtual environment for digital twins by presenting four use cases. In Section 3, we outline the architecture of CPS Twinning and discuss its underlying components. Section 4 presents a proof of concept implementation of CPS Twinning, followed by Section 5 where we describe related work. Finally, in Section 6 we provide concluding remarks and discuss future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">USE CASES</head><p>In this section, we describe possible use cases for digital twins to improve the security of CPSs and support security analysts in designing defenses.</p><p>Intrusion Detection. In a literature review conducted by Mitchell and Chen <ref type="bibr" target="#b22">[23]</ref>, the authors concluded that behavior-specificationbased intrusion detection <ref type="bibr" target="#b33">[33]</ref> may prove to be a promising approach to uncover intruders, while keeping the false positive rate at a minimum. Intrusion detection systems (IDSs) that use this particular technique attempt to detect malicious activity by identifying deviations from a defined model of benign behavior <ref type="bibr" target="#b22">[23]</ref>. By using a detailed specification of the production system as a template for digital twins, they could monitor their own behavior and report deviations from their specification. This could, e.g., include the detection of unknown devices, unspecified connections, and changes in the control logic. In addition, specified security and safety rules could be monitored inside the virtual environment.</p><p>Another scenario is the use of additional, independent sensors to discover manipulations and defects <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b17">18]</ref>. While the integration, monitoring, and correlation of new sensors in a production environment is not trivial, this could be handled completely inside the digital twin. After placing the additional sensor in the physical environment, the readings are replicated to its digital twin and correlated with measurements from other sensors.</p><p>System Testing &amp; Simulation. Digital twins can be leveraged to perform system tests and simulations. Security analysts can explore a production clone, instead of relying on documentation and theoretical attack vectors. Furthermore, real devices can be tested by first connecting them in the virtual environment. For instance, if the real device is connected as a replacement of the existing digital-twin PLC, the operator could observe the behavior of the new PLC inside the virtual environment. Modules to automatically record and compare specific configurations could be a further extension. Moreover, experimenting with configurations in a virtual environment provides the possibility to detect problems and incompatibilities early, without costly setups.</p><p>Detecting Misconfigurations. Another use case is to detect mismatches of the real environment and the maintained specification. If, for instance, a physical device is added to the real environment without adapting the specification, the mismatch could be detected and reported. The same applies to the case where a physical device is not consistent with its virtual representation, due to misconfiguration or manipulation by an attacker.</p><p>Penetration Testing. Penetration testing of ICSs must be carefully designed, since network scans such as a ping sweep may cause the system to behave in an unexpected manner, potentially harming manufacturing equipment and human health <ref type="bibr" target="#b10">[11]</ref>. Thus, preferably maintenance windows are selected for penetration tests in the live environment. However, temporarily stopping or limiting the operation of the plant is costly and often not feasible, especially for critical infrastructures. Building test environments specifically for conducting penetration testing may also not be a viable alternative, considering cost and time implications. With a virtual mirror of the production environment, security analysts could identify weaknesses and subsequently test countermeasures, before implementing them in production.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">FRAMEWORK</head><p>This section describes CPS Twinning, a digital-twin framework to support the presented use cases in Section 2.</p><p>As the high-level view given in Figure <ref type="figure" target="#fig_0">1</ref> illustrates, the architecture of the framework is composed of two main modules, viz. the generator and the virtual environment. The generator module takes engineer-and domain-specific knowledge as input to create the virtual environment. Once the digital twins and the network topology have been generated, the virtual environment can operate in two modes. First, the virtual environment provides a simulation mode, in which the digital twins run independently from the physical environment. Second, the replication mode records events such as network traffic from the physical environment and replicates them in the virtual setup. On top of both modes, the framework includes multiple modules that can be activated on demand, such as monitoring, security analysis and intrusion detection. As the framework should be extensible, we propose a multi-module architectural approach. In Section 4 we demonstrate a first prototypical implementation of CPS Twinning.</p><p>In the following, a detailed description of each component is given.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Input Knowledge</head><p>A vital part of the presented idea is to leverage the specifications of CPSs designed throughout the engineering phases. In this way, the virtual environment can be generated based on existing artifacts, instead of building it from scratch. The advantage of this approach is that the generation of the virtual environment is automatic and thereby replacing time-consuming work with an efficient and scalable solution. Furthermore, this approach yields reproducible results, meaning that the virtual environment can be rebuilt identically at any time, as long as the specification exists. Any changes to the physical environment without adapting the respective specification results in a divergence from its virtual counterpart. Consequently, the specifications of CPSs should be kept in sync, fostering a traceable and well documented environment.</p><p>Creating and maintaining a detailed specification of a CPS that enables the generation of a complete virtual replica entails additional effort. Ideally, the organization already uses standardized languages (such as AML) to design, exchange, and preserve their setups.</p><p>3.1.1 Engineer Knowledge. Engineer knowledge describes the information that is unique to the environment at hand. It comprises the design of the complete process, including system components, network information and the internal behavior of CPSs. Based on the process definition, the topology of the environment and logical connections between individual components can be derived. In essence, the topology is modeled by specifying the components (e.g., name, product type, vendor), their corresponding traits (e.g., I/O channels) and their configuration (e.g., IP and MAC address).</p><p>Furthermore, defining hierarchical relationships within components is also an important aspect to consider when modeling a system. In particular, devices can be examined during operation to check if they adhere to the specification, e.g., verifying that a system provides only those services that were defined beforehand. Moreover, this modeling approach enables CPS Twinning to enforce fine-grained policies and constraints on all hierarchical levels.</p><p>Another aspect to consider is the explicit definition of the communication path from one host to another through logical connections and endpoints <ref type="bibr" target="#b2">[3]</ref>. Besides using these details to generate the network setup of the virtual environment, this data can also serve as a basis for implicit security rules. More specifically, the framework could monitor the traffic flow and check if network packets contain permitted addressing and protocol information. For example, a communication path between an HMI and a PLC could be defined in the specification, including the used application layer protocol (e.g., Modbus) and the underlying details of the request protocol data unit (e.g., function code). Consequently, a whitelist for network-level monitoring can be derived from the explicit mapping of the network layout.</p><p>As far as the behavior of CPSs is concerned, control logic can also be attached to device specifications. For example, a program implemented as a sequential function chart (SFC), one of the programming languages defined in IEC 61131-3 <ref type="bibr" target="#b12">[13]</ref>, can be referenced as a program block of a PLC instance. Since SFC is a standardized programming language, the referenced code can often be directly transferred to the physical PLC for execution or at least converted to vendor-specific dialects. As a result, no additional effort from an engineering perspective is incurred and realistic simulations can be guaranteed, since the control logic deployed in both environments (physical and virtual) is identical. Including process information is also valuable for security-related modules (e.g., IDS).</p><p>Finally, we emphasize the explicit integration of safety and security rules into the specification. In the course of the process design, engineers can explicitly state safety rules that define normal operation. This knowledge enables the framework to determine whether the process is in a safe state and thereby supplementing safety instrumented systems (SIS). For example, value limits for device variables (e.g., min. temperature and max. speed) can be stated. Conditional statements, as well as comparisons between variables from different digital twins offer more complex rules.</p><p>While engineers provide the knowledge concerning safety risks, security analysts could contribute rules that indicate benign or malicious behavior. For example, a rule could be specified that restricts the network communication between an HMI and a PLC, depending on the PLC's internal state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Domain</head><p>Knowledge. Domain knowledge refers to information that is independent from a specific physical process, meaning that it can be defined once and then shared among several organizations. Industrial equipment producers for example, are in the position to define each of their devices and then provide these artifacts in the form of device templates. These templates could include domain-specific knowledge from experts in the field of mechanical, electrical, and control engineering. Engineers could then either reference these ready-made templates or use them as a starting point to avoid redundant work. Moreover, producers and security professionals can also provide safety and security rules and update them continuously. For example, the specification of a tank could include the maximum allowable fill level, whereas the specification of a PLC could predefine rules for protecting the integrity of the firmware.</p><p>Previous research on intrusion detection for CPSs focuses also on attack detection based on the physical properties of a system <ref type="bibr" target="#b34">[34]</ref>. In this work, we propose the explicit definition of physics rules and thereby implicitly defining input that is relevant for the security and safety analysis. Consider an attack targeting a chemical process with the goal to overflow a tank. The attacker attempts to manipulate the liquid level sensor measurements in order to trick the control system into filling the tank beyond its limit. By keeping track of the previous fill and drain control activities, the framework could calculate an expected liquid level inside the tank by applying principles of fluid dynamics and compare it to the sensor data. Inconsistencies would then point to malicious behavior or defects.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">CPS Twinning Framework</head><p>The CPS Twinning framework represents the main contribution of this paper. It includes a generator, the virtual environment and modules that interact with digital twins. Each component will be explained further in the following subsections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2.1</head><p>Generator. The generator is responsible for transforming the specification into a virtual environment. As a first step, the specification is parsed to extract the topological structure of the network, the devices with their corresponding configuration and the security and safety rules. After that, the virtual environment is built by generating virtual objects and applying their respective configuration. Finally, the parsed rules are stored in an abstract representation for later evaluation by the security and safety analysis module.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Virtual</head><p>Environment. This component forms the core of CPS Twinning and provides the virtualized network infrastructure as well as a runtime for virtual devices. As a realistic simulation of the physical process is paramount for the use cases presented in Section 2, the virtualized CPSs should match their physical counterparts as closely as possible. In particular, this includes the execution of control logic, network protocols, device types and the physical equipment. Figure <ref type="figure" target="#fig_2">2</ref> depicts an overview of the framework design. The bottom layer provides a foundation for the CPSs network infrastructure. On top of it are industrial protocols that can be used by digital twins. The digital twins reside one layer above the industrial protocols and can either be emulated by executing the control  While the "cyber" part of a CPS can be reconstructed identically in the virtual environment, physical components, such as sensors or actuators, as well as their interactions with the real world, must be simulated. As suggested by Antonioli and Tippenhauer <ref type="bibr" target="#b1">[2]</ref>, this can be realized by implementing a file-based storage for sensor and actuator values, or even by integrating hardware-in-the-loop (HIL) solutions. In Figure <ref type="figure" target="#fig_2">2</ref>, this is represented as the physical component layer, coexisting with the virtual component layer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Simulation &amp; Replication.</head><p>After the automatic generation of the virtual environment according to the specification and the configuration of digital twins, the two modes of operation become available, i.e., replication and simulation.</p><p>In simulation mode, the digital twins run independently of their physical counterparts. Similar to virtual commissioning, this mode allows users to analyze process changes, test devices or even optimize manufacturing operations. Furthermore, security professionals can use this mode to perform security tests within the virtual environment, thereby avoiding potential implications of testing on a live system.</p><p>The replication mode on the other hand, mirrors data from the physical environment. Possible data sources to mirror in the virtual environment are log files, network communication and sensor measurements from the physical environment. Furthermore, sensors could also be directly connected to the CPS Twinning framework. By means of data diodes or unidirectional gateways, the direction of the data flow could be restricted to avoid negative effects on the physical environment. It should also be noted that a direct connection between the physical and virtual environment is not a mandatory requirement. For example, data could be collected offline for a certain period of time and then used in replication mode. Yet, to ensure that the virtual replica continuously reflects the physical environment, the use of an automated data replication method is preferred.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.4">Monitoring.</head><p>Monitoring the process under control is an important aspect of the framework. Hence, the monitoring module provides an interface to assess the process state. In particular, sensor values and actuator states can be collected and prepared for analysis and visualization. In this way, the monitoring functionality of CPS Twinning can assist users in gaining a deeper understanding of the environment at hand, ensure its proper operation, and facilitate troubleshooting when issues occur.</p><p>Although this module is particularly useful in replication mode, when the primary objective is to monitor the physical process, insights into the simulated environment can also be of importance. More concretely, monitoring the physical process in replication mode and then switching to simulation mode allows to investigate a certain state. This approach may provide insight regarding the root cause that led to an unexpected behavior.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.5">Device</head><p>Testing. Due to the realistic virtualization of the physical environment, CPS Twinning facilitates virtual commissioning. This opens the possibility to test physical devices by integrating them into the virtual environment. The process states, as well as the behavior of the system under test can be monitored to verify that the system is working as expected. While the setup of an identical physical test environment is expensive and time-consuming, this approach may be considered as an attractive alternative to test the replacement of devices and to perform integration tests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2.6</head><p>Security &amp; Safety Analysis. As mentioned in Section 3.1, security and safety rules can be stated either implicitly or explicitly in the specification. After these rules have been extracted from the specification, this module performs an analysis during operation to detect abnormal conditions of the process in the virtual environment. Note that in replication mode, the physical environment is mirrored to its virtual counterpart; thus, it can be assumed that abnormalities emerge identically. Besides detecting abnormal process states during operation, this approach also provides the possibility to run simulations in the virtual environment in order to test the setup against violations of the specified rules.</p><p>In contrast to a SIS, the framework is able to identify abnormal conditions by correlating the state of digital twins. It has access to all states and events inside the virtual environment, and thereby, can also monitor state changes over time. With this information, relationships between variables can be analyzed in order to spot violations of defined safety rules. Moreover, sensors that are independent of the process under control may be used as an additional data source to report their view on the system's state. The advantage of this approach is that the framework provides a holistic view of the physical process.</p><p>With focus on security, the digital twins and their specification can serve as a foundation for a behavior-specification-based IDS. The IDS could take the twins' state as a primary input for analysis (host-based), but also audit the network traffic (network-based). Contrary to a behavior-based IDS, this approach does not require a training phase and may yield a low false positive rate <ref type="bibr" target="#b22">[23]</ref>, provided that the specification is correct and the virtual environment is consistent with the physical. The specified process knowledge could also help to detect semantic attacks on control systems, such as discussed in <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b24">25]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.7">Behavior Learning &amp; Analysis.</head><p>Learning the behavior of the virtual environment serves as valuable input for process optimization and anomaly detection. It may be possible to track down process bottlenecks or other factors that negatively affect the process or the quality of manufactured products. Furthermore, typical Industry 4.0 use cases, such as predicting the manufacturing throughput or the health of systems <ref type="bibr" target="#b16">[17]</ref>, may be also implemented on top of this module. With CPS Twinning, analysts can focus on learning algorithms and data interpretation, while the setup and monitoring is handled by the framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Management Client</head><p>Since users need the possibility to manage and control the virtual environment, a unified interface that provides access to all modules of the framework is required. However, protecting the framework from unauthorized users is essential. If adversaries gain access to CPS Twinning, they could obtain a detailed description of the physical environment and identify weak points of systems. This information can then be used to discover attack paths to desired targets. Likewise, the security and safety rules may inform an attacker about controls that are covered by the framework.</p><p>In addition, the management client may also provide visualization features to represent digital twins graphically.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">PROOF OF CONCEPT</head><p>In this section we demonstrate how a physical environment can be modeled, and we present a first implementation of the introduced framework. While we can only show excerpts in this section, the complete prototype and scenario files can be found on GitHub <ref type="bibr" target="#b0">1</ref> .</p><p>A minimal setup serves as our physical environment, including a Siemens S7-1200 PLC, an HMI, a network switch to connect both components, and a conveyor belt that is driven by a motor. While the motor is operated by the PLC, the HMI is used to monitor and control the PLC via the Modbus TCP/IP protocol. The HMI (i.e., Modbus master) allows users to write holding registers on the PLC (i.e., Modbus slave) in order to start/stop the conveyor and to set the velocity respectively.</p><p>The engineer-and domain-knowledge (cf. Section 3.1) is the main input to create a virtual environment. To formulate the specification, we chose the data format AML <ref type="bibr" target="#b9">[10]</ref>. AML aims to support the complete engineering chain of production systems by offering a standardized data exchange format for most of the artifacts (e.g., technical, topological, and control related information) within the engineering process. This XML-based data format considers both, a syntactical and a semantic level to describe the data objects, and furthermore, is flexible with respect to extensions and changes, which makes it a fitting candidate to model the required knowledge for our framework.</p><p>The core of the CPS Twinning framework has been developed in Python and is based on existing components, such as Mininet <ref type="bibr" target="#b15">[16]</ref>. Mininet allows users to virtualize network environments and it is extensible, so we were able to build the CPS Twinning layers on top. Apart from Mininet, the framework also integrates the iec2c transcompiler that is included in the MatIEC project 2 . This compiler translates code written in a programming language of the IEC 61131-3 standard to C code. Further, we implemented a custom runtime to execute the code generated by iec2c in the context of a digital twin, enabling CPS Twinning to emulate the internal behavior of PLCs.</p><p>As a minimum requirement, the prototype depends upon the existence of an artifact that describes the characteristics of the digital twins. The prototype currently supports the generation of PLCs, HMIs, components without a network interface (e.g., motor) that only monitor the state of other digital twins, and default Mininet network nodes (e.g., switches). Moreover, the specification parser has been designed to extract data from an AML artifact describing the setup that will be presented in the following section. Thus, we expect users to either adapt the provided AML parser to their needs or write their own parser implementation for their preferred data format.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Scenario Specification</head><p>In the following, we explain the relevant parts of the scenario specification.</p><p>Figure <ref type="figure">3</ref> illustrates the exemplary physical process. For a better understanding, we describe the main elements of the specification and show excerpts of the artifact alongside.</p><p>When modeling the communication of hosts in AML, there are at least two views that can be defined, viz. the physical and logical network <ref type="bibr" target="#b2">[3]</ref>. As an example for the physical network, Wire1 connects the physical endpoint of HMI1 with the physical endpoint of Switch1. The definition of the physical endpoint of HMI1, including a part of the network configuration of the HMI (i.e., IP address), can be seen in Listing 1. Moreover, the excerpt shows a logical device named HMI that contains a logical endpoint and the HMI variable Velocity.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 1: Excerpt of the HMI specification</head><p>As shown in Listing 2, Wire1 is used to connect HMI1 to Switch1. In AML, a link can be modeled by using the InternalLink element <ref type="bibr" target="#b2">[3]</ref>. Listing 2 depicts how the endpoints of both devices can be referenced via the RefPartnerSideA and RefPartnerSideB attributes. Note that the attribute value of RefPartnerSideB points to the physical endpoint of HMI1 (cf. Listing 1). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 2: Excerpt of a wire specification</head><p>In contrast to the physical network, the logical network models the exchange of data among hosts from an abstract perspective <ref type="bibr" target="#b2">[3]</ref>. As Listing 3 shows, a logical connection exists between the HMI and the PLC, since both hosts exchange data via the network. In addition, the element named LogicalConnectionA includes protocol data units (PDU) that specify which PLC and HMI tags are exchanged. For instance, the PDU named VelocityModbusTCPDataPacket establishes a link between the Velocity tag of PLC1 and HMI1. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 3: Excerpt of the logical network specification</head><p>Similar to HMI1, PLC1 is specified as a physical device that includes a logical device. The PLC code has been implemented as a SFC and, as shown in Listing 4, is referenced directly within the AML artifact. A snippet of the control logic is also depicted in Figure <ref type="figure">3</ref>, represented as a ladder diagram (LD). As can be seen in the LD, the start/stop tags control the output Q0.0, which in turn drives the motor control block that triggers the pulse train output (PTO). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 4: Referencing PLC code (SFC) in AML</head><p>At this point, we have introduced the engineer knowledge about the devices with their configuration, the network setup (physical and logical), as well as the control logic. When comparing it to Figure <ref type="figure" target="#fig_0">1</ref>, it is evident that the specification of security and safety rules is still lacking. For this prototypical implementation of CPS Twinning, we want to demonstrate how a safety and a security rule can be defined.</p><p>Safety Rule. In this example, we want to ensure that the conveyor speed does not exceed a certain threshold. This safety rule could either be stated by the vendor of the motor or by a person designing the process. In order to define this rule in the specification, we used the interface class VariableInterface to reference the Velocity variable of the PLC program and then added a RequiredMaxValue constraint (cf. Listing 5). Since variables of the PLC code can be stated in the specification, the person defining the rule is not required to access the code or understand the underlying logic of the PLC program. Security Rule. Stuxnet demonstrated how susceptible ICSs are to data manipulation. Manipulated sensors or controllers reporting incorrect values can disrupt the entire process and may lead to unsafe states. Approaches to mitigate this risk include the use of independent sensors, PLC integrity checks, and consistency checks throughout the control network. In this example, we want to show how a consistency check can be modeled in AML, so that the rule can be evaluated during operation by CPS Twinning.</p><p>Recall that the HMI displays the motor status (started/stopped), according to the operator's action. An attacker who gains access to the network could launch a man-in-the-middle attack (MITM) in order to manipulate system states. For example, a successful spoofing attack could cause the HMI to display an incorrect status or trick the PLC into starting the motor, without the HMI actually sending the command.</p><p>To detect inconsistent states of the HMI and the PLC, we introduce a VariableLinkConstraint that expects equality between the variables of the two devices (cf. Listing 6). In addition, we could also connect an independent physical sensor (outside the process loop) to the CPS Twinning framework, and take its measurements for comparison. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Virtual Environment Generation</head><p>This section describes step-by-step how the prototype generates the virtual environment based on knowledge sources. The creation process is initiated by executing the custom command twinning via Mininet's command-line interface (CLI). This particular command expects the path to the AML artifact as an argument for the parser. After invoking the AML parser, the topology is generated and the extracted rules are provided to the security and safety analysis module.</p><p>As already mentioned in Section 4, we used the API of Mininet to implement the basic network layer of the framework. Each implemented digital twin class that requires network capabilities inherits from Mininet's Host class, allowing a seamless integration into Mininet. As a result, the predefined Mininet commands (e.g., nodes to list all hosts) can also be used for the generated digital twins. Owing to Mininet's virtualization approach, each digital twin of the network topology is a process that is running in its own network namespace <ref type="bibr" target="#b15">[16]</ref>.</p><p>When instantiating a PLC node, the framework spawns another process in the twin's namespace to run the program that emulates the internal behavior of the PLC. This particular Python program starts the build process of the PLC code and subsequently manages its execution. Depending on the specification, it is also able to emulate a Modbus slave. Furthermore, the PLC emulator starts a listener to exchange data between the Mininet CLI and the process that emulates the PLC. In this way, users are able to view metadata about the PLC program (e.g., variable types) and get/set a tag's value. Listing 7 provides an overview of the supported commands. Compared to Mininet hosts, the HMI digital twins also support the show_tags, get_tag and set_tag commands. If one of the commands to get/set a tag are executed, the framework spawns a Modbus master to communicate with the PLC.</p><p>In the case of virtually cloning physical devices that require no network capability (e.g., motors), instances of the corresponding class (e.g., Motor) are created, but not added to the virtualized network. To simulate the internal behavior of these devices, the instances monitor specific tags of connected digital twins, such as a PLC.</p><p>Finally, the security and safety analysis module is initialized with the parsed rules. This component monitors specific variables of digital twins and issues alerts in case of a detected rule violation. In this first version of CPS Twinning, alerts are logged to a file.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Simulation &amp; Results</head><p>At this point, we want to test the virtual environment generated from specification in the previous section. First, we execute simple actions in the physical as well as in the virtual environment. Thereafter, we compare the outcome of both runs to see how similar the results are. Second, we execute a MITM attack inside the virtual environment, to test the detection of violated security and safety rules, based on the examples given in Section 4.1, Safety Rule and Security Rule.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Environment Comparison.</head><p>For the comparison, we trigger all user commands via the HMI in the physical environment and through variable changes (e.g., set_tag HMI1 Start True) on the digital twin respectively. The simple process steps are as follows:</p><p>(1) Initially, the motor is off, waiting for the HMI1 to send a start command. Hence, this is also the first action in the simulated run.</p><p>(2) Next, we adapt the velocity of the conveyor belt to a value of 19 and 21 afterwards. (3) Finally, we stop the conveyor belt after a short period.</p><p>In order to observe the behavior and events, we captured the network traffic in the virtual and physical environment. The network capture from the physical environment contains 46 packets, whereas the capture from the virtual environment contains 50. We excluded unrelated traffic, such as DHCP and DNS, from the traffic dump of the physical environment. The IP addresses are identical in both environments, as defined in our AML artifact. Furthermore,  The Modbus payload is identical in both environments, but there is a difference in the timestamps, due to the fact that we triggered the commands manually. We can also see that the response times inside the virtual environment are lower than in our physical setup. The network stack of our virtual environment and the physical devices is not identical, hence, there are slight differences in the TCP traffic. Our digital twin for the HMI responds with an ACK packet (Listing 9, line 6) to a Modbus query before sending the Modbus response. The HMI of the physical environment only sends the Modbus response (Listing 8, line 6). Similar, the Siemens PLC sends a RST packet after FIN to close the connection (Listing 8, line 10).</p><p>This short example demonstrated, that the automatically generated digital twins behave according to the specification. The digital twins, including their network configuration match the physical environment, viz. the physical environment matches the specification. With focus on the control logic, we did not detect deviations in the control flow as the PLC's digital twin runs the same code as its physical counterpart. However, there are minor differences in the network traffic, due to varying implementations of the network stack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">Detecting Rule Violations.</head><p>We now evaluate the effectiveness of the security and safety analysis module with regards to detecting violations of the specified rules. To validate our approach, we launched an ARP spoofing attack in the simulated virtual environment to position the attacker between the HMI and the PLC (MITM). When the Modbus master (HMI) sends a command to the Modbus slave (PLC), the attacker intercepts the traffic and manipulates the request. In our attack scenario, the operator attempts to set the velocity of the conveyor to the value of 20 by using the HMI. The Modbus master then sends a request (FC: 16) to write the new velocity value to the respective register of the slave. However, the attacker intercepts the traffic between the two parties and modifies the packet's payload in order to set the velocity to 100. Listing 10 depicts an excerpt of the intercepted network traffic. Recall that according to the specification, the velocity must not exceed the threshold value of 60 (cf. Listing 5) and the HMI velocity tag value must be equal to the corresponding tag of the PLC (cf. Listing 6). As a result, if the attacker succeeds in tampering the velocity value, the security and safety analysis module of CPS Twinning should raise two alarms, since both constraints are violated.   As can be seen in Listing 11, the framework tracks state changes and yields a warning if a violation of a specified rule occurs. The logged statements could signal plant operators or security professionals that a system is in an abnormal condition and requires investigation.</p><p>As already stated, the MITM attack has been carried out in the virtual environment, meaning that we tested the detection of rule violations when running CPS Twinning in simulation mode. However, the result in replication mode would be identical, provided that all states of the physical production system are replicated. Furthermore, the absence of the attacker's MAC address in the specification would result in a mismatch between the physical and virtual environment; hence, exposing the attack.</p><p>It should also be mentioned that the presented attack scenario can be mitigated by specifying network rules (e.g., an IP to MAC address mapping already exists in the specification). However, we chose the aforementioned rules intentionally to demonstrate how the state of digital twins can be audited.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RELATED WORK</head><p>Previous research can be divided into (i) the simulation of CPSs, (ii) process-aware intrusion detection systems, and (iii) the modeling of digital twins.</p><p>Several studies have attempted to simulate ICSs in order to assess their level of security <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b36">36]</ref>. Similar to our approach, MiniCPS <ref type="bibr" target="#b1">[2]</ref> is also based on Mininet to emulate the network layer for simulated CPSs. However, there are several fundamental distinctions between MiniCPS and CPS Twinning. First of all, MiniCPS aims to provide researchers a virtual environment to test CPSs network setups, explore different attack scenarios, and evaluate countermeasures. While CPS Twinning also supports all of the aforementioned use cases, the focus of our work lies on generating digital twins in order to virtually replicate the physical process as close as possible. Furthermore, we propose a framework with security modules beyond network analysis, and present a first prototype, including security and safety rules in simulation mode. Second, CPS Twinning has been designed to generate the virtual environment from specification. As a result, the framework allows a seamless integration into the system engineering process and can further be maintained with ease by updating the specification. Third, in <ref type="bibr" target="#b1">[2]</ref>, the authors demonstrate how a MITM attack can be prevented by implementing an ARP spoofing detection algorithm in a custom software-defined networking (SDN) controller. In contrast, we show in Section 4.3.2 how such an attack can be detected by monitoring the states of digital twins. Finally, it is also worth highlighting that there are substantial differences in the implementation of both frameworks. While in MiniCPS the emulation of a PLC requires users to port the PLC code to Python, our presented prototype supports direct PLC code execution. As far as the implementation of industrial protocols is concerned, MiniCPS supports Modbus TCP/IP and EtherNet/IP, whereas CPS Twinning is currently limited to Modbus TCP/IP. Dong et al. <ref type="bibr" target="#b8">[9]</ref> investigate how SDN can be leveraged to increase the resilience of smart grids and which security risks are involved with this approach. In their work, they describe several use cases where SDN can be applied as a countermeasure against attacks, such as a distributed denial-of-service (DDoS) or packet delay attack. Further, the authors developed a smart gird test bed to validate their proposed approach. This particular test bed is based on Mininet and PowerWorld 3 , a power system simulator. Contrary to <ref type="bibr" target="#b8">[9]</ref>, the paper at hand does neither focus specifically on the resilience of CPSs, nor does the prototype presented in Section 4 support the generation of digital twins that would provide a complete virtual replica of a smart grid. However, as the work by Dong et al. <ref type="bibr" target="#b8">[9]</ref> demonstrates, Mininet is also suitable to be used as part of a SDN-based smart grid simulator; thus, enhancing the prototype to expand the concept of digital twins also to smart grids may constitute a valuable extension.</p><p>Works such as <ref type="bibr" target="#b24">[25]</ref> and <ref type="bibr" target="#b7">[8]</ref> propose a process-aware intrusion detection technique by utilizing the knowledge of engineers who developed the system. In <ref type="bibr" target="#b24">[25]</ref>, the authors present a network-based IDS framework for SCADA systems that is able to take process variable values into account (e.g., temperature). In their work, they propose a language that allows engineers to express normal values of process variables. While defining these constraints with their proposed language seems trivial, this requirement can be considered as an activity that does not naturally fit into the engineering workflow and may entail additional effort. In contrast, we propose the implicit or explicit definition of these constraints in engineering data formats, such as AML. While efforts have been made to automate the task of creating the rules that specify a system's correct behavior <ref type="bibr" target="#b4">[5]</ref>, manual work obviously remains if the documentation is missing or other sources provide incomplete information. As a result, we argue that security knowledge about a CPS should be defined already in early phases of the system engineering process and then maintained consistently throughout the system's lifecycle.</p><p>Other studies related to our work concentrate on modeling <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b28">28]</ref> and implementing digital twins <ref type="bibr" target="#b32">[32,</ref><ref type="bibr" target="#b35">35]</ref>. It is worth mentioning that Schroeder et al. <ref type="bibr" target="#b28">[28]</ref> also use AML to model digital twins. However, their work focuses on the data exchange between the digital twin and other systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS</head><p>In this paper, we have presented CPS Twinning, a framework to generate and execute digital twins, and furthermore, we have demonstrated the process in an industrial scenario. It covers a novel approach to automatically generate virtual environments completely from specification. As a result, this approach is reusable, consistent and guarantees a complete reflection of the specification.</p><p>With this approach, organizations that already use specification languages in their engineering process can build a digital environment without any or little additional effort. Tooling support and device templates could help in reaching a consistent specification in general. It further opens the possibility to recreate and experiment with an identical CPS environment, just by exchanging its specification.</p><p>From a security perspective, an identical (in terms of the system's specification), simulated environment can be freely explored and tested by security experts, without endangering the production environment. However, the security possibilities go beyond that. On top of the virtualization engine, security modules support experts in protecting the environment. In a proof of concept, we have demonstrated how the framework detects a MITM attack, targeting the manipulation of a motor's speed.</p><p>Current limitations of the prototype include a limited support of data types in PLC code (data types other than Boolean and integer are not available) and Modbus function codes. There are also some steps, which have been triggered manually, but could be integrated in a complete automation pipeline. For example, the translation of vendor-specific function blocks.</p><p>While the paper at hand has introduced the idea of the framework and a prototype has demonstrated the complete process, from specification to detection, other features and modules have not been implemented yet.</p><p>As far as the prototype of the CPS Twinning framework is concerned, the implementation thereof raised several issues that are worth pointing out. First, the underlying idea of this work relies on the assumption that a specification of CPSs exists in a level of detail that allows the generation of the virtual environment. Ideally, artifacts are maintained throughout the lifecycle of CPSs and are already suitable to be used as an input for CPS Twinning, which in practice may not be the case. If artifacts are missing or incomplete, users are required to manually create the specification before using the framework. Since this process is error-prone and involves manual work, integrating a specification mining approach into CPS Twinning would provide valuable support. Second, achieving an implementation of digital twins that provides an identical replication of their physical counterparts is challenging. For example, differences in the network stack implementation may manifest in the network traffic itself (cf. Section 4.3.1) and the timing of actions, causing digital twins to be out of sync with their physical counterparts. Third, implementing a framework that is capable of closely mirroring CPSs is a work-intensive task, even if some components that facilitate the development (e.g., Mininet) are already publicly available.</p><p>As future work, we want to focus on the replication mode of the framework, i.e., mirroring the state of physical systems to their corresponding digital twins. To validate our approach, we plan to launch a MITM attack in the real environment for the purpose of detecting deviations in the behavior of digital twins to spot attacks as early as possible.</p><p>Moreover, we aim to address the issue of non-existent or incomplete artifacts by mining specifications. Passive sniffing, device fingerprinting or extracting data from system logs and documentation may be possible approaches that would help users to get started with CPS Twinning if no such specification exists initially.</p><p>Further topics include, e.g., a modeling language for security and safety rules, exploring device templates with security rules, behavior learning and analysis in combination with anomaly detection, a client to visualize results and to manage the framework, as well as supporting additional industrial protocols.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Architecture of CPS Twinning</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Layers of CPS Twinning</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>1 &lt;InternalElement 2 &lt;InternalElement 3 &lt;ExternalInterface 4 &lt;Attribute</head><label>1234</label><figDesc>2 https://bitbucket.org/mjsousa/matiec Name="HMI1" RefBase="/Siemens HMI"&gt; Name="Portlist" ID="28d..."&gt; Name="Endpoint" ID="fb1..."&gt; Name=</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>9 10&lt;InternalElement 11 &lt;ExternalInterface 12 &lt;ExternalInterface 13 &lt;Attribute</head><label>9111213</label><figDesc>Name="HMI" ID="068..." RefBase="/HMI"&gt; Name="Endpoint" ID="068..." /&gt; Name="Velocity" ID="da4..." RefBaseClassPath="/HMIVariableInterface"&gt; → Name=</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>1 &lt;InternalElement 2 &lt;ExternalInterface 3 &lt;ExternalInterface 4 &lt;InternalLink</head><label>1234</label><figDesc>Name="Wire1" RefBase="/PhysicalConnection" ID="652..."&gt; → Name="EP1" ID="e5b..." /&gt; Name="EP2" ID="857..." /&gt; Name="Switch1 -HMI1"RefPartnerSideA="{a29...}:Endpoint1" RefPartnerSideB="{28d...}:Endpoint"</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>1 &lt;InternalElement 2 &lt;InternalElement 3 &lt;ExternalInterface 4 &lt;ExternalInterface 5 &lt;InternalElement 6 &lt;InternalLinkFigure 3 :</head><label>1234563</label><figDesc>Figure 3: Illustration of the artifact that specifies the exemplary physical process</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>1 &lt;InternalElement 2 &lt;ExternalInterface 3 &lt;Attribute 4 &lt;Value&gt;file</head><label>1234</label><figDesc>Name="Program" ID="133..." RefBase="/Main"&gt; Name="OB1" RefBase="/PLCopenXMLInterface" ID="2e2..."&gt; → Name="refURI" AttributeDataType="xs:anyURI"&gt;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>1 &lt;ExternalInterface 2 &lt;Attribute 3 &lt;Value&gt;fileListing 5 :</head><label>1235</label><figDesc>Name="Velocity" RefBase="/VariableInterface"&gt; Name="refURI"&gt; Specification of the safety rule, defining a maximum speed of the motor</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>1 &lt;InternalElementListing 6 :</head><label>16</label><figDesc>Name="VelocityConstraint" ID="e0b..."&gt; &lt;Attribute Name="operator" AttributeDataType="xs:string"&gt; Specification of the security rule, defining that the values of both variables must be equal</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>1 mininet&gt; 6 10 - 23 TrueListing 7 :</head><label>1610237</label><figDesc>Switch1-eth1&lt;-&gt;HMI1-eth0 (OK OK)7 Switch1-eth2&lt;-&gt;PLC1-eth0 (OK OK) --------------------------------------Output of commands that can be used for a PLC digital twin</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Session 3 : 1 2Listing 8 : 1 2</head><label>3181</label><figDesc>SCADA Security and Digital Twins CPSS'18, June 4, 2018, Incheon, Republic of Korea the process steps match in both environments, including our manually triggered actions, as well as the responses sent by the Modbus slave. Going into more detail, we compare the TCP stream of the velocity change inside the physical network (cf. Listing 8) to the virtual environment (cf. Listing 9). 1 |Time | 192.168.0.2 &lt;&gt; 192.168.0.|12.767734 | --&gt; | TCP: 49796 -502 [SYN] Seq=0 MSS=1460 3 |12.768956 | &lt;--| TCP: 502 -49796 [SYN, ACK] Seq=0 Ack=1 MSS=1460 4 |12.768987 | --&gt; | TCP: 49796 -502 [ACK] Seq=1 Ack=1 5 |12.769628 | --&gt; | Modbus/TCP: Query: Func: 16 (Register 2: 19)6 |12.787200 | &lt;--| Modbus/TCP: Response: Func: 16 7 |12.787291 | --&gt; | TCP: 49796 -502 [ACK] Seq=16 Ack=13 8 |12.787620 | --&gt; | TCP: 49796 -502 [FIN, ACK] Seq=16 Ack=13 9 |12.791942 | &lt;--| TCP: 502 -49796 [ACK] Seq=13 Ack=17 10 |12.802970 | &lt;--| TCP: 502 -49796 [RST, ACK] Seq=13 Ack=17 Excerpt of the Modbus TCP/IP network traffic in the physical environment 1 |Time | 192.168.0.2 &lt;&gt; 192.168.0.|6.048040 | --&gt; | TCP: 52606 -502 [SYN] Seq=0 MSS=1460 3 |6.050265 | &lt;--| TCP: 502 -52606 [SYN, ACK] Seq=0 Ack=1 MSS=1460 4 |6.050279 | --&gt; | TCP: 52606 -502 [ACK] Seq=1 Ack=1 5 |6.053310 | --&gt; | Modbus/TCP: Query: Func: 16 (Register 2: 19)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>6 |6.Listing 9 :</head><label>69</label><figDesc>053515 | &lt;--| TCP: 502 -52606 [ACK] Seq=1 Ack=16 7 |6.058982 | &lt;--| Modbus/TCP: Response: Func: 16 8 |6.058995 | --&gt; | TCP: 52606 -502 [ACK] Seq=16 Ack=13 9 |6.061786 | --&gt; | TCP: 52606 -502 [FIN, ACK] Seq=16 Ack=13 10 |6.068576 | &lt;--| TCP: 502 -52606 [FIN, ACK] Seq=13 Ack=17 11 |6.068586 | --&gt; | TCP: 52606 -502 [ACK] Seq=17 Ack=14 Excerpt of the Modbus TCP/IP network traffic in the virtual environment Line 5 of Listing 8 and Listing 9 reflects the actual Modbus request to write multiple registers, setting register number 2 to the value 19.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>1 |Time | Flow | Info 2 |0 4 ... 5 |29 7 ... 8 |29</head><label>124578</label><figDesc>.000000 | A -&gt; P | ARP: 192.168.0.2 is at A 3 |0.000387 | A -&gt; H | ARP: 192.168.0.1 is at A .44686 | H -&gt; A | TCP: 34976 -502 [SYN] 6 |29.44689 | A -&gt; P | TCP Out-Of-Order 34976 -502 [SYN] .45431 | H -&gt; A | Modbus/TCP: Query: Func: 16 (Register 2: 20) 9 |29.45432 | A -&gt; P | TCP Retr.: Query: Func: 16 (Register 2: 100) 10 ... 11 |29.47340 | P -&gt; A | Modbus/TCP: Response: Func: 16 12 |29.47341 | A -&gt; H | TCP Retr.: Response: Func: 16 13 ... Listing 10: Excerpt of the intercepted network traffic between the PLC (P) and the HMI (H) from the attacker's (A) point of view</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>1 INFO</head><label>1</label><figDesc>:root:'Velocity' value changed 0 -&gt; 20 in device 'HMI1'.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>2 INFO</head><label>2</label><figDesc>:root:'VELOCITY' value changed 0 -&gt; 100 in device 'PLC1'.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>3 WARNING 4 WARNING→Listing 11 :</head><label>3411</label><figDesc>:root:ALERT! 'PLC1' tag [Velocity=100] exceeds max value of 60. → :root:ALERT! 'HMI1' tag [Velocity=20] does not equal 'PLC1' tag [Velocity=100]. Logging output of CPS Twinning</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">https://github.com/sbaresearch/cps-twinning</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">https://www.powerworld.com/</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The financial support by the Austrian Federal Ministry for Digital, Business and Enterprise and the National Foundation for Research, Technology and Development, and COMET K1, FFG -Austrian Research Promotion Agency is gratefully acknowledged. Furthermore, this work was supported by the Austrian Science Fund (FWF) and netidee SCIENCE under grant P30437-N31.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">C2PS: A Digital Twin Architecture Reference Model for the Cloud-Based Cyber-Physical Systems</title>
		<author>
			<persName><forename type="first">Kazi</forename><forename type="middle">Masudul</forename><surname>Alam</surname></persName>
			<idno type="ORCID">0000-0003-4731-9847</idno>
		</author>
		<author>
			<persName><forename type="first">Abdulmotaleb</forename><surname>El Saddik</surname></persName>
			<idno type="ORCID">0000-0002-7690-8547</idno>
		</author>
		<idno type="DOI">10.1109/access.2017.2657006</idno>
		<ptr target="https://doi.org/10.1109/ACCESS.2017.2657006" />
	</analytic>
	<monogr>
		<title level="j">IEEE Access</title>
		<title level="j" type="abbrev">IEEE Access</title>
		<idno type="ISSNe">2169-3536</idno>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="2050" to="2062" />
			<date type="published" when="2017" />
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">MiniCPS</title>
		<author>
			<persName><forename type="first">Daniele</forename><surname>Antonioli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nils</forename><forename type="middle">Ole</forename><surname>Tippenhauer</surname></persName>
		</author>
		<idno type="DOI">10.1145/2808705.2808715</idno>
		<ptr target="https://doi.org/10.1145/2808705.2808715" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First ACM Workshop on Cyber-Physical Systems-Security and/or PrivaCy</title>
				<meeting>the First ACM Workshop on Cyber-Physical Systems-Security and/or PrivaCy<address><addrLine>NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015-10-16" />
			<biblScope unit="page" from="91" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Whitepaper: Communication</title>
		<author>
			<persName><surname>Automationml</surname></persName>
		</author>
		<idno>V_1.0.0</idno>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
	<note>AutomationML consortium</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">IEEE-CYBER 2011 welcome message</title>
		<author>
			<persName><forename type="first">Radhakisan</forename><surname>Baheti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Helen</forename><surname>Gill</surname></persName>
		</author>
		<idno type="DOI">10.1109/cyber.2011.6011820</idno>
	</analytic>
	<monogr>
		<title level="m">2011 IEEE International Conference on Cyber Technology in Automation, Control, and Intelligent Systems</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011-03" />
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="161" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Sequence-aware Intrusion Detection in Industrial Control Systems</title>
		<author>
			<persName><forename type="first">Marco</forename><surname>Caselli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emmanuele</forename><surname>Zambon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Frank</forename><surname>Kargl</surname></persName>
		</author>
		<idno type="DOI">10.1145/2732198.2732200</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Workshop on Cyber-Physical System Security</title>
				<meeting>the 1st ACM Workshop on Cyber-Physical System Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015-04-14" />
			<biblScope unit="page" from="791" to="806" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Sequence-aware Intrusion Detection in Industrial Control Systems</title>
		<author>
			<persName><forename type="first">Marco</forename><surname>Caselli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emmanuele</forename><surname>Zambon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Frank</forename><surname>Kargl</surname></persName>
		</author>
		<idno type="DOI">10.1145/2732198.2732200</idno>
		<ptr target="https://doi.org/10.1145/2732198.2732200" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Workshop on Cyber-Physical System Security</title>
				<meeting>the 1st ACM Workshop on Cyber-Physical System Security<address><addrLine>NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015-04-14" />
			<biblScope unit="page" from="13" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Simulation of Network Attacks on SCADA Systems</title>
		<author>
			<persName><forename type="first">Rohan</forename><surname>Chabukswar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bruno</forename><surname>Sinopoli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gabor</forename><surname>Karsai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Annarita</forename><surname>Giani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Himanshu</forename><surname>Neema</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Davis</surname></persName>
		</author>
		<ptr target="http://www.truststc.org/pubs/693.html" />
	</analytic>
	<monogr>
		<title level="m">First Workshop on Secure Control Systems, Cyber Physical Systems Week</title>
				<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">What&apos;s under the hood? Improving SCADA security with process awareness</title>
		<author>
			<persName><forename type="first">J</forename><surname>Justyna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anne</forename><surname>Chromik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Boudewijn</forename><forename type="middle">R</forename><surname>Remke</surname></persName>
		</author>
		<author>
			<persName><surname>Haverkort</surname></persName>
		</author>
		<idno type="DOI">10.1109/CPSRSG.2016.7684100</idno>
		<ptr target="https://doi.org/10.1109/CPSRSG.2016.7684100eemcs-eprint-27160" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Software-Defined Networking for Smart Grid Resilience</title>
		<author>
			<persName><forename type="first">Xinshu</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hui</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rui</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ravishankar</forename><forename type="middle">K</forename><surname>Iyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zbigniew</forename><surname>Kalbarczyk</surname></persName>
		</author>
		<idno type="DOI">10.1145/2732198.2732203</idno>
		<ptr target="https://doi.org/10.1145/2732198.2732203" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Workshop on Cyber-Physical System Security</title>
				<meeting>the 1st ACM Workshop on Cyber-Physical System Security<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015-04-14" />
			<biblScope unit="page" from="61" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">AutomationML - the glue for seamless automation engineering</title>
		<author>
			<persName><forename type="first">Rainer</forename><surname>Drath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arndt</forename><surname>Luder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jorn</forename><surname>Peschke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lorenz</forename><surname>Hundt</surname></persName>
		</author>
		<idno type="DOI">10.1109/etfa.2008.4638461</idno>
		<ptr target="https://doi.org/10.1109/ETFA.2008.4638461" />
	</analytic>
	<monogr>
		<title level="m">2008 IEEE International Conference on Emerging Technologies and Factory Automation</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008-09" />
			<biblScope unit="page" from="616" to="623" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Penetration testing of industrial control systems</title>
		<author>
			<persName><forename type="first">David</forename><surname>Duggan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Berg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Dillinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jason</forename><surname>Stamp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sandia National Laboratories</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Data fusion-base anomay detection in networked critical infrastructures</title>
		<author>
			<persName><forename type="first">Bela</forename><surname>Genge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christos</forename><surname>Siaterlis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Georgios</forename><surname>Karopoulos</surname></persName>
		</author>
		<idno type="DOI">10.1109/dsnw.2013.6615505</idno>
		<ptr target="https://doi.org/10.1109/DSNW.2013.6615505" />
	</analytic>
	<monogr>
		<title level="m">2013 43rd Annual IEEE/IFIP Conference on Dependable Systems and Networks Workshop (DSN-W)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013-06" />
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Introduction to Programming and IEC 61131-3</title>
		<idno type="DOI">10.1002/9781118949214.ch5</idno>
		<idno>IEC. 2003. 61131-3</idno>
	</analytic>
	<monogr>
		<title level="m">Programmable Logic Controllers</title>
				<meeting><address><addrLine>Geneva</addrLine></address></meeting>
		<imprint>
			<publisher>John Wiley &amp; Sons, Ltd</publisher>
			<date type="published" when="2015-09-12" />
			<biblScope unit="page" from="131" to="151" />
		</imprint>
	</monogr>
	<note>Programmable controllers -Part 3: Programming languages. International Standard, Second Edition</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Industrial communication networks. Network and system security</title>
		<idno type="DOI">10.3403/bsiec62443-3</idno>
		<idno>IEC. 2009. 62443</idno>
		<imprint>
			<date>2009</date>
			<publisher>BSI British Standards</publisher>
			<biblScope unit="volume">1</biblScope>
			<pubPlace>Geneva</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Towards Large-Scale, Heterogeneous Anomaly Detection Systems in Industrial Networks: A Survey of Current Trends</title>
		<author>
			<persName><forename type="first">Mikel</forename><surname>Iturbe</surname></persName>
			<idno type="ORCID">0000-0001-9641-5646</idno>
		</author>
		<author>
			<persName><forename type="first">Iñaki</forename><surname>Garitano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Urko</forename><surname>Zurutuza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Roberto</forename><surname>Uribeetxeberria</surname></persName>
		</author>
		<idno type="DOI">10.1155/2017/9150965</idno>
	</analytic>
	<monogr>
		<title level="j">Security and Communication Networks</title>
		<title level="j" type="abbrev">Security and Communication Networks</title>
		<idno type="ISSN">1939-0114</idno>
		<idno type="ISSNe">1939-0122</idno>
		<imprint>
			<biblScope unit="volume">2017</biblScope>
			<biblScope unit="page" from="1" to="17" />
			<date type="published" when="2017-11-22" />
			<publisher>Hindawi Limited</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A network in a laptop</title>
		<author>
			<persName><forename type="first">Bob</forename><surname>Lantz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brandon</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Mckeown</surname></persName>
		</author>
		<idno type="DOI">10.1145/1868447.1868466</idno>
		<ptr target="https://doi.org/10.1145/1868447.1868466" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth ACM SIGCOMM Workshop on Hot Topics in Networks - Hotnets &apos;10</title>
				<meeting>the Ninth ACM SIGCOMM Workshop on Hot Topics in Networks - Hotnets &apos;10</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">19</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Recent advances and trends in predictive manufacturing systems in big data environment</title>
		<author>
			<persName><forename type="first">Jay</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edzel</forename><surname>Lapira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Behrad</forename><surname>Bagheri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hung-An</forename><surname>Kao</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.mfglet.2013.09.005</idno>
		<ptr target="https://doi.org/10.1016/j.mfglet.2013.09.005" />
	</analytic>
	<monogr>
		<title level="j">Manufacturing Letters</title>
		<title level="j" type="abbrev">Manufacturing Letters</title>
		<idno type="ISSN">2213-8463</idno>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="38" to="41" />
			<date type="published" when="2013-10" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Last Line of Defense: A Novel IDS Approach Against Advanced Threats in Industrial Control Systems</title>
		<author>
			<persName><forename type="first">Mark</forename><surname>Luchs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christian</forename><surname>Doerr</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-60876-1_7</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-60876-1_7" />
	</analytic>
	<monogr>
		<title level="m">Detection of Intrusions and Malware, and Vulnerability Assessment</title>
				<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="141" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Fundamentals of Artifact Reuse in CPPS</title>
		<author>
			<persName><forename type="first">Arndt</forename><surname>Lüder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicole</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kristofer</forename><surname>Hell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hannes</forename><surname>Röpke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jacek</forename><surname>Zawisza</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-56345-9_5</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-56345-9_5" />
	</analytic>
	<monogr>
		<title level="m">Multi-Disciplinary Engineering for Cyber-Physical Production Systems</title>
				<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="113" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Identification of Artifacts in Life Cycle Phases of CPPS</title>
		<author>
			<persName><forename type="first">Arndt</forename><surname>Lüder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicole</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kristofer</forename><surname>Hell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hannes</forename><surname>Röpke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jacek</forename><surname>Zawisza</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-56345-9_6</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-56345-9_6" />
	</analytic>
	<monogr>
		<title level="m">Multi-Disciplinary Engineering for Cyber-Physical Production Systems</title>
				<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="139" to="167" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Cybersecurity Landscape in Industrial Control Systems</title>
		<author>
			<persName><forename type="first">Stephen</forename><surname>Mclaughlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Charalambos</forename><surname>Konstantinou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xueyang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lucas</forename><surname>Davi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ahmad-Reza</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michail</forename><surname>Maniatakos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ramesh</forename><surname>Karri</surname></persName>
		</author>
		<idno type="DOI">10.1109/jproc.2015.2512235</idno>
		<ptr target="https://doi.org/10.1109/JPROC.2015.2512235" />
	</analytic>
	<monogr>
		<title level="j">Proceedings of the IEEE</title>
		<title level="j" type="abbrev">Proc. IEEE</title>
		<idno type="ISSN">0018-9219</idno>
		<idno type="ISSNe">1558-2256</idno>
		<imprint>
			<biblScope unit="volume">104</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1039" to="1057" />
			<date type="published" when="2016-05" />
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A survey SCADA of and critical infrastructure incidents</title>
		<author>
			<persName><forename type="first">Bill</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dale</forename><surname>Rowe</surname></persName>
		</author>
		<idno type="DOI">10.1145/2380790.2380805</idno>
		<ptr target="https://doi.org/10.1145/2380790.2380805" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st Annual conference on Research in information technology - RIIT &apos;12</title>
				<meeting>the 1st Annual conference on Research in information technology - RIIT &apos;12<address><addrLine>NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="51" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A survey of intrusion detection techniques for cyber-physical systems</title>
		<author>
			<persName><forename type="first">Robert</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ing-Ray</forename><surname>Chen</surname></persName>
		</author>
		<idno type="DOI">10.1145/2542049</idno>
		<ptr target="https://doi.org/10.1145/2542049" />
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<title level="j" type="abbrev">ACM Comput. Surv.</title>
		<idno type="ISSN">0360-0300</idno>
		<idno type="ISSNe">1557-7341</idno>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="29" />
			<date type="published" when="2014-04" />
			<publisher>Association for Computing Machinery (ACM)</publisher>
		</imprint>
	</monogr>
	<note>Article</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Industrial Control System Traffic Data Sets for Intrusion Detection Research</title>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Gao</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-662-45355-1_5</idno>
		<ptr target="https://doi.org/10.1007/978-3-662-45355-1_5" />
	</analytic>
	<monogr>
		<title level="m">Progress in Pattern Recognition, Image Analysis, Computer Vision, and Applications</title>
				<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="65" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A SCADA Intrusion Detection Framework that Incorporates Process Semantics</title>
		<author>
			<persName><forename type="first">Jeyasingam</forename><surname>Nivethan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mauricio</forename><surname>Papa</surname></persName>
		</author>
		<idno type="DOI">10.1145/2897795.2897814</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th Annual Cyber and Information Security Research Conference</title>
				<meeting>the 11th Annual Cyber and Information Security Research Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016-04-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A SCADA Intrusion Detection Framework that Incorporates Process Semantics</title>
		<author>
			<persName><forename type="first">Jeyasingam</forename><surname>Nivethan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mauricio</forename><surname>Papa</surname></persName>
		</author>
		<idno type="DOI">10.1145/2897795.2897814</idno>
		<ptr target="https://doi.org/10.1145/2897795.2897814" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th Annual Cyber and Information Security Research Conference</title>
				<meeting>the 11th Annual Cyber and Information Security Research Conference<address><addrLine>NY, Article 6</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016-04-05" />
			<biblScope unit="volume">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">About The Importance of Autonomy and Digital Twins for the Future of Manufacturing</title>
		<author>
			<persName><forename type="first">Roland</forename><surname>Rosen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Georg</forename><surname>Von Wichert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">George</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kurt</forename><forename type="middle">D</forename><surname>Bettenhausen</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.ifacol.2015.06.141</idno>
		<ptr target="https://doi.org/10.1016/j.ifacol.2015.06.141" />
	</analytic>
	<monogr>
		<title level="j">IFAC-PapersOnLine</title>
		<title level="j" type="abbrev">IFAC-PapersOnLine</title>
		<idno type="ISSN">2405-8963</idno>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="567" to="572" />
			<date type="published" when="2015" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Analysis of Intrusion Detection Systems in Industrial Ecosystems</title>
		<author>
			<persName><forename type="first">Juan</forename><forename type="middle">Enrique</forename><surname>Rubio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cristina</forename><surname>Alcaraz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rodrigo</forename><surname>Roman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Javier</forename><surname>Lopez</surname></persName>
		</author>
		<idno type="DOI">10.5220/0006426301160128</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th International Joint Conference on e-Business and Telecommunications</title>
				<meeting>the 14th International Joint Conference on e-Business and Telecommunications</meeting>
		<imprint>
			<publisher>SCITEPRESS - Science and Technology Publications</publisher>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Digital Twin Data Modeling with AutomationML and a Communication Methodology for Data Exchange</title>
		<author>
			<persName><forename type="first">N</forename><surname>Greyce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carlos</forename><forename type="middle">E</forename><surname>Steinmetz</surname></persName>
		</author>
		<author>
			<persName><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Danubia</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.ifacol.2016.11.115</idno>
		<ptr target="https://doi.org/10.1016/j.ifacol.2016.11.115" />
	</analytic>
	<monogr>
		<title level="j">IFAC-PapersOnLine</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="page" from="12" to="17" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note>Espindola</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Draft modeling, simulation, information technology &amp; processing roadmap</title>
		<author>
			<persName><forename type="first">Mike</forename><surname>Shafto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mike</forename><surname>Conroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rich</forename><surname>Doyle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ed</forename><surname>Glaessgen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chris</forename><surname>Kemp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jacqueline</forename><surname>Lemoigne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lui</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Technology Area</title>
		<imprint>
			<biblScope unit="page">11</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Lessons Learned from the Maroochy Water Breach</title>
		<author>
			<persName><forename type="first">Jill</forename><surname>Slay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Miller</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-0-387-75462-8_6</idno>
	</analytic>
	<monogr>
		<title level="m">IFIP International Federation for Information Processing</title>
				<editor>
			<persName><forename type="first">Eric</forename><surname>Critical Infrastructure Protection</surname></persName>
			<persName><forename type="first">Sujeet</forename><surname>Goetz</surname></persName>
			<persName><surname>Shenoi</surname></persName>
		</editor>
		<meeting><address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<publisher>Springer US</publisher>
			<date>2008</date>
			<biblScope unit="page" from="73" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Guide to Industrial Control Systems (ICS) Security</title>
		<author>
			<persName><forename type="first">Keith</forename><surname>Stouffer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Victoria</forename><surname>Pillitteri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Suzanne</forename><surname>Lightman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marshall</forename><surname>Abrams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Hahn</surname></persName>
		</author>
		<idno type="DOI">10.6028/nist.sp.800-82r2</idno>
		<ptr target="https://doi.org/10.6028/nist.sp.800-82r2" />
	</analytic>
	<monogr>
		<title level="m">Guide to Industrial Control Systems (ICS) Security. NIST special publication</title>
				<imprint>
			<publisher>National Institute of Standards and Technology</publisher>
			<date type="published" when="2015-06" />
			<biblScope unit="volume">800</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<author>
			<persName><forename type="first">H.-J</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christian</forename><surname>Uhlemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rolf</forename><surname>Lehmann</surname></persName>
		</author>
		<author>
			<persName><surname>Steinhilper</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.procir.2016.11.152</idno>
		<ptr target="https://doi.org/10.1016/j.procir.2016.11.152" />
		<title level="m">The Digital Twin: Realizing the Cyber-Physical Production System for Industry 4.0. Procedia CIRP 61</title>
				<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="335" to="340" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Experiences with Specification-Based Intrusion Detection</title>
		<author>
			<persName><forename type="first">Prem</forename><surname>Uppuluri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sekar</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-45474-8_11</idno>
		<ptr target="https://doi.org/10.1007/3-540-45474-8_11" />
	</analytic>
	<monogr>
		<title level="m">Lecture Notes in Computer Science</title>
				<meeting><address><addrLine>Berlin Heidelberg; Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer Berlin Heidelberg</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="172" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Survey and new directions for physics-based attack detection in control systems</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">I</forename><surname>Urbina</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jairo</forename><surname>Giraldo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alvaro</forename><forename type="middle">A</forename><surname>Cardenas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junia</forename><surname>Valente</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mustafa</forename><surname>Faisal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nils</forename><forename type="middle">Ole</forename><surname>Tippenhauer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Justin</forename><surname>Ruths</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><surname>Candell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Henrik</forename><surname>Sandberg</surname></persName>
		</author>
		<idno type="DOI">10.6028/nist.gcr.16-010</idno>
		<ptr target="https://doi.org/10.6028/nist.gcr.16-010" />
		<imprint>
			<date type="published" when="2016-11" />
			<publisher>National Institute of Standards and Technology</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">The digital twin of an industrial production line within the industry 4.0 concept</title>
		<author>
			<persName><forename type="first">Jan</forename><surname>Vachalek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lukas</forename><surname>Bartalsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oliver</forename><surname>Rovny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dana</forename><surname>Sismisova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Martin</forename><surname>Morhac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Milan</forename><surname>Loksik</surname></persName>
		</author>
		<idno type="DOI">10.1109/pc.2017.7976223</idno>
		<ptr target="https://doi.org/10.1109/PC.2017.7976223" />
	</analytic>
	<monogr>
		<title level="m">2017 21st International Conference on Process Control (PC)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017-06" />
			<biblScope unit="page" from="258" to="262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A Simulation Environment for SCADA Security Analysis and Assessment</title>
		<author>
			<persName><forename type="first">Chunlei</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lan</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yiqi</forename><surname>Dai</surname></persName>
		</author>
		<idno type="DOI">10.1109/icmtma.2010.603</idno>
		<ptr target="https://doi.org/10.1109/ICMTMA.2010.603" />
	</analytic>
	<monogr>
		<title level="m">2010 International Conference on Measuring Technology and Mechatronics Automation</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010-03" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="342" to="347" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
