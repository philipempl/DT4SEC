<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">MBSE Testbed for Rapid, Cost-Effective Prototyping and Evaluation of System Modeling Approaches</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2021-03-05">5 March 2021</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Azad</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
							<email>azad.madni@usc.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Licensee MDPI</orgName>
								<address>
									<settlement>Basel</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Systems Architecting and Engineering Program</orgName>
								<orgName type="department" key="dep2">School of Engineering</orgName>
								<orgName type="institution">University of Southern California</orgName>
								<address>
									<postCode>90089</postCode>
									<settlement>Los Angeles</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">MBSE Testbed for Rapid, Cost-Effective Prototyping and Evaluation of System Modeling Approaches</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2021-03-05">5 March 2021</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.3390/app11052321</idno>
					<note type="submission">Received: 16 January 2021 Accepted: 25 February 2021</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.2" ident="GROBID" when="2021-06-09T12:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Madni, A.M. MBSE Testbed for Rapid, Cost-Effective Prototyping and Evaluation of System Modeling Approaches Perimeter security of stationary aircraft on a landing strip</term>
					<term>autonomous vehicle navigation with dynamic obstacles model-based systems engineering</term>
					<term>MBSE</term>
					<term>digital engineering</term>
					<term>testbed</term>
					<term>digital twin</term>
					<term>simulation</term>
					<term>ontologies</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Model-based systems engineering (MBSE) is making impressive strides both in increasing systems life-cycle coverage <ref type="bibr" target="#b0">[1]</ref> and in the ability to model increasingly more complex systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>. Recently, MBSE has begun to employ the digital-twin concept <ref type="bibr" target="#b3">[4]</ref> from digital engineering (DE) to enhance system verification and validation. Not surprisingly, these developments are increasingly producing more MBSE artifacts <ref type="bibr" target="#b4">[5]</ref> that need to be organized, metadata-tagged, and managed to facilitate rapid development, integration, and "test drive" of system models in simulation in support of what-if experimentation.</p><p>Currently, MBSE researchers work with specific models and simulations to address a particular problem, thereby producing mostly point solutions. Furthermore, they seldom document assumptions and lessons learned. This practice implies that most MBSE researchers are largely starting without the benefit of the knowledge gained by others. Fortunately, MBSE is a methodology-neutral construct that allows researchers to pursue different modeling approaches, experiment with different algorithms, and learn from such experiences. Most recently, in an attempt to make modeling more rigorous, MBSE researchers are turning to formal ontologies to underpin their system models and facilitate assessment of model completeness, semantic consistency, syntactic correctness, and traceability. In light of these deficiencies and emerging trends and opportunities, this paper introduces the concept of a MBSE testbed to organize and manage MBSE artifacts, support MBSE experimentation with different models, algorithms, and data, and catalogue the case studies and lessons learned. It presents a prototype implementation of the testbed and demonstrates the capabilities of the testbed for real-world operational scenarios, along with findings and lessons learned. It also presents an illustrative quantitative analysis of results produced through simulation-based experimentation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Materials and Methods</head><p>The testbed encompasses the following: software programming environment; multiple modeling methods; analysis and optimization algorithms; repositories packages and libraries; simulation environments; and hardware components and connectors. The following list presents the core components of the testbed.</p><p>Software Programming Environment </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Results</head><p>This section describes the research objectives, prototype implementation, and experimental results, along with key findings and implications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Research Objectives</head><p>The key research objectives are to</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Develop a structured framework for cost-effective and rapid prototyping and experimentation with different models, algorithms, and operational scenarios.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Develop an integrated hardware-software environment to support on-demand demonstrations and facilitate technology transition to customer environments.</p><p>The first objective encompasses the following:</p><p>1.</p><p>Defining the key modeling formalisms that enable flexible modeling based on operational environment characteristics and knowledge of the system state space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>Defining a flexible and customizable user interface that enables scenario building by nonprogrammers, visualization of simulation execution from multiple perspectives, and tailored report generation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>Defining operational scenarios encompassing both nominal and extreme cases (i.e., edge cases) that challenge the capabilities of the system of interest (SoI)</p><p>The second objective encompasses the following:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>Identifying low-cost components and connectors for realizing capabilities of the SoI 5.</p><p>Defining an ontology-enabled integration capability to assure correctness of the integrated system. 6.</p><p>Testing the integrated capability using an illustrative scenario of interest to the systems engineering community</p><p>These objectives are satisfied through the realization of a MBSE testbed specifically designed for rapid prototyping, what-if experimentation, data collection, and analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">MBSE Testbed Concept</head><p>The MBSE testbed concept is broader than that of conventional hardware-in-the-loop (HWIL) testbeds. HWIL testbeds are used for early integration and testing of physical systems as well as formal verification and validation (V&amp;V). Typical HWIL testbeds consist of hardware, software modules, and simulations in which system components are either physically present or simulated. Simulated components are progressively replaced by physical components as they become available <ref type="bibr" target="#b9">[10]</ref>. The MBSE testbed construct extends HWIL capabilities by including the means for developing and exercising abstract models independently or interoperating with HWIL <ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref>. Just as importantly, the MBSE testbed construct provides a modeling, simulation, and integration environment for developing and evaluating digital twins <ref type="bibr" target="#b4">[5]</ref>. The envisioned capabilities of the MBSE testbed include the ability to:</p><p>• represent models at multiple scales and from different perspectives. The testbed offers a means to improve understanding of functional requirements and operational behavior of the system in a simulated environment. It provides measurements from which quantitative characteristics of the system can be derived. It provides an implementation laboratory environment in which modeled real-world systems (i.e., digital twins) can be evaluated from different perspectives.</p><p>A testbed, in essence, comprises three components: an experimentation subsystem; a monitoring and measurement system; and a simulation-stimulation subsystem. The experimentation subsystem comprises real-world system components and prototypes which are the subject of experimentation. The monitoring and measurement system comprises interfaces to the experimentation system to extract raw data and a support component to collate and analyze the collected information. The simulation-stimulation subsystem provides the hooks and handles to experiment with real-world system agents and outputs to ensure a realistic experimentation environment.</p><p>However, testbeds can have limitations. For example, they cost too much, and they are limited to modeling systems and components that satisfy the testbed environment constraints. In addition, for some problems, analytic and/or simulation models may be more appropriate. This would be the case for complex distributed systems. Therefore, testbeds can be viewed as a flexible and modeler platform that complements/subsumes simulation and analytic methods.</p><p>Figure <ref type="figure" target="#fig_0">1</ref> presents the MBSE testbed concept. The testbed comprises a user interface that supports the following: scenario authoring, dashboard capabilities for scenario execution monitoring visualization, and control, and report generation; a suite of modeling and analysis tools including system modelers, machine learning and data analytics algorithms; simulation engines for discrete event simulation, hybrid simulation, and component simulation; and repositories of operational scenario vignettes, system models, component libraries, and experimentation results.</p><p>The testbed supports system conceptualization, realization, and assurance. System conceptualization comprises use case development; requirement elicitation, decomposition, and allocation; system concept of operations (CONOPS); logical architectures; metrics; initial system models; and initial validation concepts. System realization entails detailed design, physical and simulation development, and integration and test. System assurance comprises evaluating system safety, security, and mission assurance. Complex systems are invariably a combination of third-party components and legacy components from previously deployed systems. As such, some components tend to be fully verified under certain operating conditions that may or may not apply in their reuse. Furthermore, complex systems are subject to unreliable interactions (e.g., sporadic or incorrect sensor inputs, and control commands that are not always precisely followed) because they interact frequently with the physical world. Finally, with increasing connectedness, they are increasingly susceptible to security threats. In light of the foregoing, the MBSE testbed needs to provide:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Inheritance evaluation, in which legacy and third-party components are subjected to the usage and environmental conditions of the new system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Probabilistic learning models, which begin with incomplete system representations and progressively fill in details and gaps with incoming data from collection assets; the latter enable learning and filling in gaps in the knowledge of system and environment states.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Networked control, which requires reliable execution and communication that enables satisfaction of hard time deadlines <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b16">17]</ref> across a network. Because networked control is susceptible to multiple points of cyber vulnerabilities, the testbed infrastructure should incorporate cybersecurity and cyber-resilience.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Enforceable properties define core attributes of a system that must remain immutable in the presence of dynamic and potentially unpredictable environments. The testbed must support verification that these properties are dependable regardless of external conditions and changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Commercial off-the-shelf (COTS) components, which typically communicate with each other across multiple networks and time scales <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b17">18]</ref>. The latter requires validation of interoperability among COTS systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Support for safety-critical systems in the form of, for example, executable, real-time system models that detect safety problems and then shut down the simulation, while the testbed can be queried to determine what happened.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Logical Architecture of MBSE Testbed</head><p>Incorporating the capabilities described in Section 3 into the testbed is being performed in stages. Figure <ref type="figure" target="#fig_1">2</ref> presents the initial logical configuration of the testbed. As shown in Figure <ref type="figure" target="#fig_1">2</ref>, the testbed prototype comprises: (a) a user interface for scenario definition and system modeling as well as for the dashboard used for monitoring, visualization, and controlling scenario execution; (b) models created by the systems engineer or researcher that reflect an envisioned or existing system are stored in the repository; (c) a multiscenario capable simulation engine that dynamically responds to injects from the user interface and collects experiment results that area sent to the repository and user interface; (d) experiment scenarios stored in the repository or entered from the GUI; and (e) a private cloud that provides testbed connectivity and protects MBSE assets.</p><p>The prototype testbed implementation supports virtual, physical, and hybrid simulations. It supports virtual system modeling and interoperability with the physical system. It is able to access data (initially manually and eventually autonomously) from the physical system to update the virtual system model thereby making it into a digital twin of the physical system. The testbed supports proper switching from the physical system to the digital twin and vice versa using the same control software.</p><p>The prototype testbed currently offers the following capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1.">System Modeling and Verification</head><p>The testbed offers both deterministic-modeling and probabilistic-modeling capabilities. In particular, it offers SysML modeling for deterministic systems and partially observable Markov decision process (POMDP) modeling for probabilistic systems. Exemplar models of both types are provided in an online "starter kit" to allow users to make a copy before commencing the system modeling activity. Verification in this context pertains to ascertaining model correctness (i.e., model completeness with request to questions that need to be answered, semantic and syntactic consistency, and model traceability to requirements).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2.">Rapid Scenario Authoring</head><p>Eclipse Papyrus is used along with SysML and Unity 3D virtual environment for scenario authoring and definition of entity behaviors. The testbed offers scenario authoring and visualization for multiple domains. For example, Figures <ref type="figure" target="#fig_2">3 and 4</ref> show the results of autonomous vehicle scenario authoring. Figure <ref type="figure" target="#fig_4">5</ref> shows visualizations for aircraft perimeter security scenario. These exemplar scenarios are used in experimenting with planning and decision-making models and algorithms. The initial scenario contexts are defined in SysML (Figure <ref type="figure" target="#fig_5">6</ref>), with Python XMI being used to extract data from the SysML model to populate the Unity virtual environment.  The behaviors of scenario entities such as autonomous vehicles, pedestrians, UAVs, and surveillance cameras are defined in Unity. The UAV, pedestrian, and vehicle behaviors are defined using standard waypoint-following algorithms in Unity. The planning and decision-making algorithms are exercised and tested with both autonomous vehicle navigation and control operations, and multi-UAV operations in aircraft perimeter security mission. Figure <ref type="figure" target="#fig_2">3a</ref> presents a visualization of a pedestrian crossing scenario, while Figure <ref type="figure" target="#fig_2">3b</ref> presents a visualization of a four-way stop sign scenario. Similarly, Figure <ref type="figure" target="#fig_3">4a</ref> presents a visualization of a vehicle crossing scenario, while Figure <ref type="figure" target="#fig_3">4b</ref> presents a visualization of a vehicle braking scenario.</p><p>Figure <ref type="figure" target="#fig_4">5a</ref> depicts the aircraft perimeter security scenario with one UAV and one video camera conducting surveillance. On the bottom right corner of the figure, camera views are shown. Figure <ref type="figure" target="#fig_4">5b</ref> presents the aircraft perimeter security with three UAVs. Eclipse Papyrus for SysML, Python XMI, and Unity 3D are used to rapidly author the scenarios with various agents. The scenarios have static agents, perception agents, dynamic auxiliary agents, and system-of-interest (SoI) agents. Static agents such as standing aircraft, traffic signs, and buildings are part of the scenario context. Perception agents, such as cameras that capture simulation environment data, are used for processing. Dynamic auxiliary agents, such as pedestrians and auxiliary cars, as well as auxiliary UAVs, follow predefined behavior in experiments. The system-of-interest (SoI) agents such as the autonomous car or UAV are used to test different algorithms defined by the experimenters. Figure <ref type="figure" target="#fig_5">6</ref> presents a SysML representation of scenario context for the aircraft perimeter security example. Included in the context are the UAV, airstrip, building, surveillance camera, and aircraft. Attributes and operations of each of those entities are defined in specific blocks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.3.">Model and Scenario Refinement</head><p>The experiment/test scenarios allow rapid and straightforward substitution of refined models for coarse models. In addition, hardware components can be substituted for virtual models. In Unity 3D, it is possible to extract various relevant properties of scenario objects such as velocities, locations, and states. Entity behaviors are assigned to objects using Unity 3D scripts written in C#. This capability affords greater flexibility in experimentation. A Python interface is used for testing various machine-learning (ML) algorithms. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.4.">MBSE Repository</head><p>The testbed repository contains libraries of scenarios, scenario objects, 3D objects, behaviors, and system/component models. For example, 3D objects such as UAV models, ground vehicle models, pedestrian models, and camera models are part of the scenario object repository. The model repository comprises system models and behaviors that can be associated with various objects in the scenario.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.5.">Experimentation Support</head><p>The testbed's virtual environment supports the collection and storage of data from experiments. For example, variables such as distances between vehicles, velocities, and decisions made by autonomous vehicles in various scenarios can be captured and stored for post hoc analysis. Data collected during experimentation can be used by machine-learning algorithms to train models. The MBSE testbed provides access to the properties of scenario objects. For example, velocity, size, shape, and location of static objects and auxiliary agents are directly extracted from the virtual environment. This capability enables the creation of feedback loops and facilitates the definition of abstract perception systems of autonomous vehicles or SoI agents. C# scripts are used to extract, process, and transfer data to other components of the dashboard. The virtual environment allows for manual control of objects, thereby affording additional flexibility in experimentation and testing. Multiple human users are able to interact with virtual objects, thereby realizing complex behaviors during experimentation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.6.">Multiperspective Visualization</head><p>The virtual environment offers visualization of system behaviors during simulation in intuitive ways. Exemplar visualizations for self-driving cars and multi-UAV operations are presented in Figures <ref type="figure" target="#fig_6">7-9</ref>. Figure <ref type="figure" target="#fig_6">7a,b</ref>, show the change in the state of the car from "safe-state" (blue clouds surrounding the cars) to "about-to-collide state" (red clouds surrounding the cars). Figure <ref type="figure" target="#fig_7">8</ref> shows another visualization perspective of the car trajectory. The purple car is the system of interest. The red zones along the vehicle trajectory indicate constraints.   Figure <ref type="figure" target="#fig_8">9</ref> presents examples of visualizations for multi-UAV operations. Figure <ref type="figure" target="#fig_8">9a,b</ref> show the change in the state of the UAV from "safe-state" (blue cloud surrounding the UAV) to "unsafe-state" (red cloud surrounding the UAV). Virtual environments offer a convenient means for stakeholders to contribute to what-if experimentation. Figure <ref type="figure" target="#fig_0">10</ref> shows another perspective in which UAV trajectories can be visualized during experimentation with planning and decision-making algorithms. These visualization assets and respective scripts are stored in the repository. The experimenter can drag and drop the asset on the scenario object and integrate it with the experiment. The assets have a user interface to customize the visualization parameters.   A ground-vehicle obstacle-avoidance scenario comprising multiple models was developed to demonstrate the utility and use of the testbed. This relatively simple scenario is used to demonstrate the integration of testbed components needed for model validation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Implementation Architecture</head><p>In this simple scenario, an autonomous vehicle has to drive safely behind another vehicle (which is viewed as a potential obstacle from a modeling perspective). The obstacleavoidance scenario is represented by a state machine diagram in SysML (Figure <ref type="figure" target="#fig_0">12</ref>). In this example, we define maintaining a distance of three meters as the safe distance between the two vehicles. Figure <ref type="figure" target="#fig_0">12</ref> shows that no action is taken when the vehicles are at least three meters apart. A transition occurs to the ActionState when the gap is less than three meters. The SysML model is mapped to the 3D virtual environment. For this mapping, a Python XMI translation tool automatically populates the asset container in Unity 3D from SysML models. Objects in Unity 3D are stored in an asset container. Figure <ref type="figure" target="#fig_0">13</ref> presents the architecture of the SysML to 3D virtual environment translation. Figure <ref type="figure" target="#fig_0">13</ref> displays the SysML block definition diagram for the obstacle-avoidance scenario context. This diagram presents various entities that are part of the scenario. The blocks in the diagram are arranged under the "ScenarioEntities" package. The structured packaging of SysML model entities facilitates the extraction of model elements.</p><p>As shown in Figure <ref type="figure" target="#fig_0">13</ref>, car, road, and obstacle-car blocks are extracted from the scenario context SysML model. These block names are then matched with existing 3D objects in the repository. When a match is found, the object is duplicated from the repository to the asset container of the 3D virtual environment. When a matching 3D object is not present in the repository, the translation program creates an empty object in the asset container. For example, in Figure <ref type="figure" target="#fig_0">13</ref>, because the "obstacle car" car object is not present in the 3D repository, an empty object is created in the asset repository. Users can further model the 3D object as per requirement. Here, the car object is duplicated to create the obstacle-car object. The user can employ the asset container to populate objects in the Unity 3D simulation. In case of a change to the SysML model, a refresh function triggers the translation program to update the asset container. A user can further customize 3D objects in the virtual environment and then populate additional objects and behaviors from the repository. Waypoint-following behavior is assigned to the front vehicle in Unity 3D. A set of points and respective velocities to be followed by front vehicle are then assigned. The simulation generates navigation areas and trajectories for a given safe distance.</p><p>During the 3D simulation, we discovered that safe distances vary based on the velocities of the vehicles, which can impact the navigation area and trajectories. We conducted experiments that varied safe-distance values and vehicle velocities to assess the impact on navigation area and possible trajectories of the autonomous vehicle. Initially, for small values of safe distance, the autonomous vehicle has multiple paths to navigate around an obstacle, but as the safe distance between vehicles is increased, the safe navigation area around the vehicle shrinks. Figure <ref type="figure" target="#fig_0">14</ref> shows simulation results of changing the safe distance on navigation area around the obstacle. As expected, the simulation showed that the navigation area for the autonomous car shrinks when the front vehicle moves relatively slower. The simulation also uncovered an assumption error in our initial experiment resulting from the use of a fixed safe distance regardless of the vehicle's relative position and velocity. Currently, various testbed components can be integrated to explore and experiment with "what if" scenarios. In addition, conceptual models can be created and refined as needed. In the above simple experiment, it became evident that the overall model needed refinement to explicate variables such as longitudinal and lateral safe distances, vehicle velocities, and vehicle acceleration and braking capacities. The simulation confirmed the obvious need for implicitly defined safe-distance rules, while also confirming that acceptable driving practices are context dependent. The ability to experiment with heterogeneous models and collect and analyze data to uncover patterns and trends enables more comprehensive elicitation of requirements. Repositories of 3D assets and their behaviors were used for rapid authoring of scenarios. For example, for the obstacle car that had a waypoint-following behavior in 3D simulation, the model of a car, road, and waypoints in the 3D environment were used from repositories and customized for a particular scenario. Additionally, algorithm visualization methods and behaviors available in the testbed repository were employed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Quantitative Analysis</head><p>The MBSE testbed allows users to integrate and evaluate different machine-learning models with different parameters. We created an exemplar simulation environment. The exemplar simulation environment consists of a UAV in an indoor building setup searching for a predefined object. In the search mission, the UAV agent receives a negative reward for colliding with objects in the environment and a positive reward for touching the predefined goal object. Users can test multiple reinforcement learning algorithms on the UAV agent. We tested the integrated models with the UAV making observations in the environment and then taking corresponding actions. Five reinforcement learning algorithms were evaluated in the experiment: proximal policy optimization (PPO), soft actor-critic (SAC), PPO with generative adversarial imitation learning (GAIL), PPO with behavioral cloning (BC), and PPO combined with GAIL and BC <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref><ref type="bibr" target="#b3">[4]</ref>. Model parameters such as cumulative reward, episode length, policy loss, and entropy were evaluated against the number of simulation runs for selected reinforcement learning algorithms. Figure <ref type="figure" target="#fig_0">15</ref> presents the learning cycle, while Figure <ref type="figure" target="#fig_0">16</ref> presents the testbed setup for quantitative analysis. As shown in Figure <ref type="figure" target="#fig_0">16</ref>, the structural model in SysML is mapped to the 3D virtual environment. For this mapping, a Python XMI translation tool was built. This tool automatically populates the asset container in the simulation environment using the SysML models. Objects in the simulation environment are stored in an asset container. Figure <ref type="figure" target="#fig_0">16</ref> displays the SysML block definition diagram for the "indoor search" scenario context. This diagram presents various entities that are part of the scenario. The blocks in the diagram are arranged under the "ScenarioEntities" package. The structured packaging of SysML model entities facilitates the extraction of model elements. The UAV, indoor environment, and goal object blocks are extracted from the scenario context SysML model. These block names are then matched with existing 3D objects in the repository. When a match is found, the object in the repository is duplicated and inserted into the 3D virtual environment's asset container. When a matching 3D object is not present in the repository, the translation program creates an empty object in the asset container for the user to further modify. The user can then employ the asset container to populate objects in the simulation. Observations and actions are defined for the simulation setup, and the rewards mechanism is created in the experiment.</p><p>As noted earlier, five models were evaluated in the experiment: proximal policy optimization (PPO), soft actor-critic (SAC), PPO with generative adversarial imitation learning (GAIL), PPO with behavioral cloning (BC), and PPO combined with GAIL and BC <ref type="bibr" target="#b18">[19]</ref><ref type="bibr" target="#b19">[20]</ref><ref type="bibr" target="#b20">[21]</ref><ref type="bibr" target="#b21">[22]</ref>. We used the Unity ML agents kit to extend the testbed capabilities <ref type="bibr" target="#b22">[23]</ref>.</p><p>Figure <ref type="figure" target="#fig_0">17</ref> presents simulation runs on the horizontal axis, and cumulative rewards gained by the agent for a given model on the vertical axis. For PPO and PPO with GAIL, the mean cumulative episode reward increases as the training progress. For the rest of the agents, reward decreases, indicating that the agent is not learning successfully for the given simulation environment and for the given simulation runs. Figure <ref type="figure" target="#fig_0">18a</ref> shows that the mean length of episodes goes down in the environment for successful agents as the training progresses. The "is training" Boolean in Figure <ref type="figure" target="#fig_0">18b</ref> indicates whether the agent is updating its model or not. The different models exhibit different behaviors for a given simulation set up. The way the user sets up the training environment impacts the performance of the models differently.</p><p>In Figure <ref type="figure" target="#fig_0">19a</ref>,b, the policy loss parameter indicates how much the policy is changing for each agent. Various models have different profiles, and for most models, the magnitude of policy loss decreases indicating successful training. In Figure <ref type="figure" target="#fig_1">20</ref>, the entropy measure indicates the degree of randomness of decisions made by the model. The slow decrease of this parameter is an indicator of a successful training session. Entropy profiles are different for different agents.  Additionally, it is possible to analyze specific model parameters such as GAIL expert estimate, GAIL policy estimate, and GAIL rewards (Figure <ref type="figure" target="#fig_0">21</ref>). The testbed also allows quantitative analysis of behavioral models. Users can manipulate various model parameters and run experiments. The testbed capabilities enable users to formulate the decision, observation, and reward problem more holistically. Various use cases and scenarios can be considered before defining agent behaviors. The holistic approach and quantitative analysis allow users to determine effective strategies for intelligent agents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Discussion</head><p>This paper has presented the system concept, architecture, prototype implementation, and quantitative analysis supported by a MBSE testbed that enables experimentation with different models, algorithms, and operational scenarios. Several important lessons were learned from the prototype implementation. First, a minimal testbed ontology <ref type="bibr" target="#b23">[24]</ref> with essential capabilities can be quite useful to begin initial experimentation with models and algorithms. Second, it is possible to adapt system model complexity to scenario complexity and thereby minimize computation load when possible. For example, for simple driving scenarios, a finite state machine (FSM) can suffice for vehicle navigation. However, as the driving scenario gets more complicated (e.g., poor observability and uncertainties in the environment), more complex system models such as POMDP can be employed to cope with environment uncertainty and partial observability. The value of POMDP modeling becomes evident when operating in complex uncertain environments. Third, when it comes to system development, it pays to start off with simple scenarios and ensure that safety requirements are met, and then progressively complicate driving scenarios and employ more complex models while continuing to assure satisfaction of safety requirements. The most straightforward way to implement this strategy is to control the complexity of the operational environment by imposing constraints (e.g., have a dedicated lane for autonomous vehicles or avoid driving in crowded streets). Then, after the simple model has been shown to satisfy safety requirements, constraints can be systematically relaxed to create more complex driving scenarios. In the latter case, more complex system models can be employed, verified, and validated with respect to safety requirements. Fourth, system and environment models can be reused, thereby reducing development time. To facilitate model reuse, the models can be metadata-tagged with usage context. Then, contextual similarity between a problem situation and system models can be employed to determine suitability of a particular system model for reuse in a particular context. This reuse feature can accelerate experimentation and development. Fifth, a smart, context-sensitive, scenario-driven dashboard can be used to dynamically adapt monitoring capability and dashboard display to maximize situation awareness with manageable cognitive load. To this end, the familiar METT-TC construct employed by the military can be employed as the underlying ontology. Based on the prevailing context, either the total set or a subset of variables in METT-TC may be applicable to characterize context. The flexible architecture of the scenario-driven dashboard can support both human-in-the-loop and autonomous operations. Just as importantly, it provides a convenient and cost-effective environment to try out different augmented-intelligence concepts <ref type="bibr" target="#b24">[25]</ref>. Sixth, a hybrid, distributed simulation capability enables integration of virtual simulation with real-world systems (e.g., self-driving cars and unmanned aerial vehicles). This integration, in turn, enables the creation of digital twins which can enhance system verification and validation activities <ref type="bibr" target="#b4">[5]</ref>. Furthermore, by assuring individual control of simulations, the testbed offers requisite flexibility in experimentation with system/system-of-system simulation. In addition, by allowing different models (e.g., scenario model and threat model) to run on different computers, simulation performance can be significantly increased. Finally, an illustrative quantitative analysis capability is presented to convey how simulation results can be analyzed to generate new insights.</p><p>Future directions include the creation of formal ontologies and metamodel <ref type="bibr" target="#b23">[24]</ref> to guide systems integration, human-systems integration <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b26">27]</ref>, adversarial modeling, introduction of digital twins at the system, and subsystem levels <ref type="bibr" target="#b4">[5]</ref>, reinforcement learning techniques to cope with partial observability and uncertainty <ref type="bibr" target="#b16">[17]</ref>, support for distributed simulation standards (i.e., IEEE 1278.2-2015), and ontology-enabled reuse <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b28">29]</ref> and interoperability <ref type="bibr" target="#b29">[30]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Model-based systems engineering (MBSE) testbed concept.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Prototype MBSE testbed logical architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. (a) Pedestrian crossing scenario, (b) four-way stop sign scenario.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. (a) Vehicle crossing scenario, (b) vehicle braking scenario.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. (a) Scenario with UAV and surveillance cameras, (b) scenario with multiple surveillance UAVs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. Scenario context definition.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. (a) Cars with "safe states", and (b) cars with about-to-collide state.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Visualize car trajectory.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. (a) All UAVs in "safe states", and (b) one UAV in "unsafe state".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 .</head><label>10</label><figDesc>Figure 10. UAV trajectory visualization.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11</head><label>11</label><figDesc>Figure11provides the implementation architecture of the testbed. As shown in the figure, a private cloud interfaces with virtual simulation, physical component simulation, modeling tool, ontology representation, user interface, and analysis tool.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 11 .</head><label>11</label><figDesc>Figure 11. Testbed implementation architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 12 .</head><label>12</label><figDesc>Figure 12. SysML high-level-state machine diagram for obstacle avoidance.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 13 .</head><label>13</label><figDesc>Figure 13. SysML to 3D virtual simulation mapping.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 14 .</head><label>14</label><figDesc>Figure 14. Simulation results of changing the safe distance on navigation area around the obstacle.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 15 .</head><label>15</label><figDesc>Figure 15. Learning cycle.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 16 .</head><label>16</label><figDesc>Figure 16. Quantitative analysis setup using testbed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 17 .</head><label>17</label><figDesc>Figure 17. Simulation runs vs. cumulative reward.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Figure 18 .</head><label>18</label><figDesc>Figure 18. (a) Simulation runs vs. episode length, and (b) is training (Boolean).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Figure 19 .</head><label>19</label><figDesc>Figure 19. (a) Simulation runs vs. policy loss (excluding SAC), and (b) simulation runs vs. policy loss for all models.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Figure 20 .</head><label>20</label><figDesc>Figure 20. Simulation runs vs. entropy.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Figure 21 .</head><label>21</label><figDesc>Figure 21. Model-specific parameter evaluation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>CARLA offers an open-source high-fidelity simulator (including code and protocols) for autonomous driving research<ref type="bibr" target="#b4">[5]</ref>. CARLA provides open digital assets, such as urban layouts, buildings, city maps, and vehicles. CARLA also supports flexible specification of sensor suites, environmental conditions, and dynamic actors. CARLA provides Python APIs to facilitate integration.</figDesc><table><row><cell></cell><cell>Hardware and Connectors</cell></row><row><cell>•</cell><cell>Donkey Car platform: an open-source platform for conducting autonomous vehi-</cell></row><row><cell></cell><cell>cles research</cell></row><row><cell>•</cell><cell>Raspberry Pi (onboard computer): on the Donkey Car</cell></row><row><cell>•</cell><cell>Quadcopters (very small UAVs used in surveillance missions), 1/16 scale robot cars</cell></row><row><cell>•</cell><cell>Video Cameras: mounted on Donkey Car and quadcopters</cell></row><row><cell>•</cell><cell>Socket communication: used to send commands from a computer to a Donkey Car or</cell></row><row><cell></cell><cell>a quadcopter</cell></row><row><cell>•</cell><cell>Operating system(s): Linux (Ubuntu 16.04) and Windows</cell></row><row><cell>•</cell><cell>Programming environment: Spyder cross-platform development environment for</cell></row><row><cell></cell><cell>Python 3.x programming language</cell></row><row><cell></cell><cell>Systems Modeling Methods (descriptive, analytic; deterministic, probabilistic)</cell></row><row><cell>•</cell><cell>Systems Modeling Language (SysML) [6]</cell></row><row><cell>•</cell><cell>Decision trees</cell></row><row><cell>•</cell><cell>Hidden Markov Models (HMM) [7]</cell></row><row><cell>•</cell><cell>Partially Observable Markov Decision Process (POMDP) model [8]</cell></row><row><cell></cell><cell>Optimization, Control, and Learning Algorithms</cell></row><row><cell>•</cell><cell>Optimization using fitness functions</cell></row><row><cell>•</cell><cell>N-step Look-ahead decision-processing algorithm</cell></row><row><cell>•</cell><cell>Traditional deterministic control algorithm (e.g., proportional-integral-derivative con-</cell></row><row><cell></cell><cell>troller (PID) algorithm)</cell></row><row><cell>•</cell><cell>Q-learning algorithm</cell></row><row><cell></cell><cell>Repositories, Packages, Libraries</cell></row></table><note>•NumPy-a Python library for manipulating large, multidimensional arrays and matrices • Pandas-a Python library for data manipulation and analysis, specifically numerical tables, and time series• Scikit-learn-a machine-learning library for Python; built on top of NumPy, SciPy and matplotlib • Python-open CV-a library of Python bindings designed to solve computer vision problems Simulation Platforms • Hardware-Software Integration Infrastructure: Multiple simulation platforms are used for visualization, experimentation, and data collection from scenario simulations for both ground-based and airborne systems; integrate simulations (implemented in Python 3) with hardware platforms, such as Donkey Car [4] and quadcopters. • CARLA Simulation Platform: • DroneKit Platform: DroneKit, an open-source platform, is used to create apps, models, and algorithms that run on onboard computers installed on quadcopters. This platform provides various Python APIs that allows for experimenting with simulated quadcopters and drones. The code can be accessed on GitHub [9].</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>• integrate with digital twins of physical systems-support both symbolic and high fidelity, time-accurate simulations; the latter can be augmented by FPGA-based development boards to create complex, time-critical simulations; and maintain synchronization between real-world hardware and virtual simulation.• accommodate multiple views, multiple models, analysis tools, learning algorithms.</figDesc><table><row><cell>•</cell><cell>manage dynamically configurable systems through software agents, employed in the</cell></row><row><cell></cell><cell>simulation-in the future these agents could invoke processes allocated to Field</cell></row><row><cell></cell><cell>Programmable Gate Arrays (FPGAs).</cell></row><row><cell>•</cell><cell>compose interoperable systems with requisite flexibility to satisfy mission needs [10,16]</cell></row><row><cell>•</cell><cell>collect and generate evidence for developing trust in systems.</cell></row><row><cell>•</cell><cell>exploit feedback from the system and environment during adaptive system operation.</cell></row><row><cell>•</cell><cell>address temporal constraints and their time-related considerations.</cell></row><row><cell>•</cell><cell>address change cascades (e.g., arising from failures) not addressed by existing tools.</cell></row><row><cell>•</cell><cell>validate models, which implies flexibility in simulation interfaces as well as propagation</cell></row><row><cell></cell><cell>of changes in modeled components as data are collected in physical tests.</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments:</head><p>The author acknowledges the technical support provided by Ayesha Madni, Shatad Purohit of the University of Southern California, and Carla Madni of Intelligent Systems Technology, Inc.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conflicts of Interest:</head><p>The author declares no conflict of interest.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Model-Based Systems Engineering: Motivation, Current Status, and Research Opportunities</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sievers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Syst. Eng</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="172" to="190" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Economic Analysis of Model Based Systems Engineering</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Purohit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Systems</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page">12</biblScope>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Towards Making the Business Case for MBSE</title>
		<author>
			<persName><forename type="first">S</forename><surname>Purohit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2020 Conference on Systems Engineering Research</title>
				<meeting>the 2020 Conference on Systems Engineering Research<address><addrLine>Redondo Beach, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2020-10-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Experimental Digital Twins for Model-Based Systems Engineering and Simulation-Based Development</title>
		<author>
			<persName><forename type="first">M</forename><surname>Schluse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Atorf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rossmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 Annual IEEE International Systems Conference</title>
				<meeting>the 2017 Annual IEEE International Systems Conference<address><addrLine>Montreal, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-04" />
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Leveraging Digital Twin Technology in Model-Based Systems Engineering</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Lucero</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Systems</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">A Practical Guide to SysML: The Systems Modeling Language</title>
		<author>
			<persName><forename type="first">S</forename><surname>Friedenthal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Steiner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<publisher>Elsevier Science &amp; Technology</publisher>
			<pubPlace>Burlington, MA, USA; Amsterdam, The Netherlands</pubPlace>
		</imprint>
	</monogr>
	<note>3rd ed.</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A tutorial on Hidden Markov Models and selected applications in speech recognition</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">R</forename><surname>Rabiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE 1989</title>
				<meeting>IEEE 1989</meeting>
		<imprint>
			<biblScope unit="volume">772</biblScope>
			<biblScope unit="page" from="257" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Solving POMDPs by searching in policy space</title>
		<author>
			<persName><forename type="first">E</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourteenth International Conference on Uncertainty in Artificial Intelligence (UIA-98)</title>
				<meeting>the Fourteenth International Conference on Uncertainty in Artificial Intelligence (UIA-98)<address><addrLine>Madison, WI, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-07" />
			<biblScope unit="page" from="24" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Cyber-Physical Testbeds</title>
		<author>
			<persName><forename type="first">C</forename><surname>Siaterlis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Genge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="page" from="64" to="73" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sievers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SoS Integration: Key Considerations and Challenges. Syst. Eng</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="330" to="347" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Specification Technique for Virtual Testbeds in Space Robotics</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bernijazoo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hillebrand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dumitrescu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Procedia Manuf</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="271" to="277" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">On enabling a model-based systems engineering discipline</title>
		<author>
			<persName><forename type="first">P</forename><surname>Denno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Thurman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mettenburg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Hardy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">INCOSE Int. Symp</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="827" to="845" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A Generic Testbed for Simulation and Physical Based Testing of Maritime Cyber-Physical System of Systems</title>
		<author>
			<persName><forename type="first">N</forename><surname>Russmeier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lamin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Phys. Conf. Ser</title>
		<imprint>
			<date type="published" when="1357" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Physical Testbed for Highly Automated and Autonomous Vessels</title>
		<author>
			<persName><forename type="first">M</forename><surname>Brinkman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hahn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th International Conference on Computer and IT Applications in the Maritime Industries</title>
				<meeting>the 16th International Conference on Computer and IT Applications in the Maritime Industries<address><addrLine>Cardiff, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-05" />
			<biblScope unit="page" from="15" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Computer Systems Performance Evaluation and Prediction, Chapter 10</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">J</forename><surname>Fortier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">E</forename><surname>Michel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hardware Testbeds, Instrumentation, Measurement, Data Extraction and Analysis</title>
				<meeting><address><addrLine>Amsterdam, The Netherlands</addrLine></address></meeting>
		<imprint>
			<publisher>Elsevier Science &amp; Technology</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="305" to="330" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Towards safe and scalable cyber-physical systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bestavros</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the NSF Workshop on CPS</title>
				<meeting>the NSF Workshop on CPS<address><addrLine>Austin, TX, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-10-16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Architecting for Systems Resilience: Challenges, Concepts, Formal Methods, and Illustrative Examples. MDPI Systems</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Erwin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sievers</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page">2021</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Cyber-Physical Systems Testbed Design Concepts</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kellerman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
			<pubPlace>Gaithersburg, MD, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>NIST</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Schulman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wolski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Dhariwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Klimov</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1707.06347</idno>
		<title level="m">Proximal policy optimization algorithms</title>
				<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><surname>Haarnoja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Hartikainen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Tucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1812.05905</idno>
		<title level="m">Abbeel, P. Soft actor-critic algorithms and applications. arXiv 2018</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<author>
			<persName><forename type="first">F</forename><surname>Torabi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Warnell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Stone</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1805.01954</idno>
		<title level="m">Behavioral cloning from observation. arXiv 2018</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ermon</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1606.03476</idno>
		<title level="m">Generative adversarial imitation learning. arXiv 2016</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">A</forename><surname>Juliani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Berges</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Teng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Harper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Elion</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Goy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Henry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mattar</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1809.02627</idno>
		<ptr target="https://arxiv.org/abs/1809.02627" />
		<imprint>
			<date type="published" when="2021-03" />
		</imprint>
	</monogr>
	<note type="report_type">A General Platform for Intelligent Agents. arXiv 2020</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">IDEON™: An Extensible Ontology for Designing, Integrating, and Managing Collaborative Distributed Enterprises in Systems Engineering</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Madni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Syst. Eng</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="35" to="48" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Exploiting Augmented Intelligence in Systems Engineering and Engineered Systems. Syst</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<imprint>
			<biblScope unit="volume">2020</biblScope>
			<biblScope unit="page" from="31" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Infusion of Cognitive Engineering into Systems Engineering Processes and Practices</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sage</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Madni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2005 IEEE International Conference on Systems, Man, and Cybernetics</title>
				<meeting>the 2005 IEEE International Conference on Systems, Man, and Cybernetics<address><addrLine>Hawaii, HI, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-10" />
			<biblScope unit="page" from="10" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">HUMANE: A Designer&apos;s Assistant for Modeling and Evaluating Function Allocation Options</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Advanced Manufacturing and Automated Systems Conference</title>
				<meeting>the Advanced Manufacturing and Automated Systems Conference<address><addrLine>Louisville, KY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988-08" />
			<biblScope unit="page" from="291" to="302" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Exploration of MBSE Methods for Inheritance and Design Reuse in Space Missions</title>
		<author>
			<persName><forename type="first">A</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2020 Conference on Systems Engineering Research</title>
				<meeting>the 2020 Conference on Systems Engineering Research<address><addrLine>Redondo Beach, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2020-03-21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Integrating Humans with Software and Systems: Technical Challenges and a Research Agenda</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Syst. Eng</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="232" to="245" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Early model-based verification of automotive control system implementation</title>
		<author>
			<persName><forename type="first">M</forename><surname>Shahbakhti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">K</forename><surname>Hedrick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 American Control Conference (ACC)</title>
				<meeting>the 2012 American Control Conference (ACC)<address><addrLine>Montreal, QC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06" />
			<biblScope unit="page" from="3587" to="3592" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
