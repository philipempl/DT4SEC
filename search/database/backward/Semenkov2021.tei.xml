<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Validation of Complex Control Systems with Heterogeneous Digital Models in Industry 4.0 Framework</title>
			</titleStmt>
			<publicationStmt>
				<publisher>MDPI AG</publisher>
				<availability status="unknown"><p>Copyright MDPI AG</p>
				</availability>
				<date type="published" when="2021-03-14">14 March 2021</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Kirill</forename><surname>Semenkov</surname></persName>
							<email>semenkovk@mail.ru</email>
						</author>
						<author>
							<persName><forename type="first">Vitaly</forename><surname>Promyslov</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Alexey</forename><surname>Poletykin</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Nadir</forename><surname>Mengazetdinov</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Licensee MDPI</orgName>
								<address>
									<settlement>Basel</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Institute of Control Sciences of the Russian Academy of Sciences</orgName>
								<address>
									<postCode>117797</postCode>
									<settlement>Moscow</settlement>
									<country key="RU">Russia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">N. Verification of Large Scale Control Systems with Hybrid Digital Models and Digital Twins&quot;</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<address>
									<addrLine>Russia, 6-12 September 2020. pp. 325-329</addrLine>
									<settlement>Sochi</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Validation of Complex Control Systems with Heterogeneous Digital Models in Industry 4.0 Framework</title>
					</analytic>
					<monogr>
						<title level="j" type="main">Machines</title>
						<title level="j" type="abbrev">Machines</title>
						<idno type="eISSN">2075-1702</idno>
						<imprint>
							<publisher>MDPI AG</publisher>
							<biblScope unit="volume">9</biblScope>
							<biblScope unit="issue">3</biblScope>
							<biblScope unit="page">62</biblScope>
							<date type="published" when="2021-03-14">14 March 2021</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.3390/machines9030062</idno>
					<note type="submission">Received: 7 February 2021 Accepted: 9 March 2021</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.2" ident="GROBID" when="2021-06-09T12:55+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Semenkov, K.</term>
					<term>Promyslov, V.</term>
					<term>Poletykin, A.</term>
					<term>Mengazetdinov, N industrial automation</term>
					<term>cyber-physical systems</term>
					<term>instrumentation and control</term>
					<term>virtualization</term>
					<term>industry 4.0</term>
					<term>digital twin</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The idea of Industry 4.0 and the term itself were phrased for the first time in Germany, in 2011, by the working group on the vision of industry development prospects <ref type="bibr" target="#b0">[1]</ref>. The group performed the activity on an assignment of the German government. In a small period, the idea and the term have become widespread. In that period, other countries had performed researches of a similar kind as well, and the idea under discussion is also known as industrial internet, advanced manufacturing, smart industry, smart manufacturing, etc. <ref type="bibr" target="#b1">[2]</ref>. The authors of the concept <ref type="bibr" target="#b2">[3]</ref> consider the industrial enterprise of the future as a flexible and adaptable cyberphysical system (CPS) that unites manufacturing, warehousing, and logistics through the medium of the Internet of Things (IoT).</p><p>The list of digital technologies that a manufacturing company of Industry 4.0 should use includes (see, for example <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5]</ref>) cloud and fog computing, artificial intelligence and mobile autonomous robots, virtualization, new data transmission protocols for the IoT, and many others. These technologies are intended to make up a CPS that integrates digital resources and physical, real objects into a consistent environment.</p><p>One of the technologies that became a part of Industry 4.0 cyberphysical industrial systems is the digital twin technology. While it is already widely used today, there is no well-established single definition of the term "digital twin" yet. For example, IBM <ref type="bibr" target="#b5">[6]</ref> defines a digital twin as "a dynamic virtual representation of a physical object or system, usually across multiple stages of its lifecycle. It uses real-world data, simulation or machine learning models, combined with data analysis, to enable understanding, learning, and</p><formula xml:id="formula_0">•</formula><p>A digital twin may follow its real counterpart at various lifecycle stages or during a single lifecycle stage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>A digital twin should have a connection with its real counterpart and collects the data from the real-world object.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>A digital twin "should enable computational and analytic models to analyze these data to describe, diagnose, predict and simulate the states and behaviors of the real-world objects and systems" <ref type="bibr" target="#b6">[7]</ref>.</p><p>High-risk enterprises are usually more conservative in the choice of technologies. However, the concept of Industry 4.0 is considered in relation to nuclear power plant (NPP) control systems since it potentially allows to increase the efficiency and safety of the operation of such facilities <ref type="bibr" target="#b9">[10]</ref>. In addition to the general properties presented above, we, on our end, tried to achieve during the practical implementation of the digital twin:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Keeping the balance between abstract model and real components in the digital twin.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Performing configuration management to establish strict conformance of the digital twin and real system during the lifecycle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Maintaining the high relevance of the digital twin timing characteristics.</p><p>A digital twin comprises a computational model and interface of data exchange with the real object. So, when the interface is not a matter of consideration, we often refer to the digital twin as the model or digital model. Both the I&amp;C system and its digital twin are cyber-physical systems (CPS) because they integrate computation and control with the physical environment's sensing and actuation. This potentially allows to interchangeably use some software and hardware components in both systems: real and digital.</p><p>In this paper, we discuss the general problems of the simulation of Industry 4.0 conformant I&amp;C systems and present our practical result: the implementation of a digital twin for a subsystem of an I&amp;C of an NPP <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref>. The presented digital twin introduces a new type of digital twins, a "heterogeneous" digital twin that comprises simulation models and real software and hardware components of the real system to achieve simulation accuracy on adequate reflection of the I&amp;C system. This paper is an expanded version of the conference paper <ref type="bibr" target="#b11">[12]</ref>. Section 2 of this paper provides a brief description of industrial I&amp;C systems and emphasize the importance of I&amp;C system modeling. Sections 3 and 4 consider various approaches to CPS modeling and the model restrictions. Section 5 says about the evolution of a digital twin during the system lifetime and specifies the approaches to the configuration management for the digital twin and the real twin. Section 6 is the practical part of the work describing the implementation of the digital twin for I&amp;C system of a nuclear power plant. Section 7 is the results' discussion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">I&amp;C as a Cyberphysical System of High Reliability</head><p>An I&amp;C system in the most general form (see Figure <ref type="figure" target="#fig_0">1</ref>) consists of a network of sensors that take off data about the managed (physical) object state; actuators that directly carry out control actions on the machinery and the equipment; data transfer channels; programmable logic controllers (PLC) collecting and processing the data from sensors and generating control commands; implementation of control algorithms; human-machine interfaces (HMI). So, an I&amp;C system itself is a cyberphysical system.</p><p>Machines 2021, <ref type="bibr">9,</ref> x FOR PEER REVIEW 3 of 18</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">I&amp;C as a Cyberphysical System of High Reliability</head><p>An I&amp;C system in the most general form (see Figure <ref type="figure" target="#fig_0">1</ref>) consists of a network of sensors that take off data about the managed (physical) object state; actuators that directly carry out control actions on the machinery and the equipment; data transfer channels; programmable logic controllers (PLC) collecting and processing the data from sensors and generating control commands; implementation of control algorithms; human-machine interfaces (HMI). So, an I&amp;C system itself is a cyberphysical system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Sensors</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PLCs</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Actuators</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Terminals</head><p>(HMI) Data processing units Let emphasize that CPS development heightens concerns about system trustworthiness, usability which include security, privacy, safety, reliability, resilience, and efficiency <ref type="bibr">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Main physical system</head><p>The CPS reliability is conditioned by both the reliability of physical components and software modules' reliability. The reliability assessment problem for physical objects is well-developed, while the reliability estimation for software systems is still an unsolved issue. For example, Antonov et al. <ref type="bibr" target="#b12">[14]</ref> performed an overview of software reliability estimation quantitative methods and concluded that current numerical methods do not provide credible estimations of reliability in a classical probability domain. That's why the term of software reliability is widely substituted by the term of software quality which, according to the standard ISO/IEC 25010:2011 <ref type="bibr" target="#b13">[15]</ref>, is "the degree to which a product or system can be used by specific users to meet their needs to achieve specific goals with effectiveness, efficiency, freedom from risk and satisfaction in specific contexts of use." ISO/IEC standards introduce some metrics to estimate different software quality factors, so by their values, it might be possible to draw indirect conclusions about the reliability of specific software under a set of specific conditions.</p><p>That is why the software reliability estimation is usually performed by testing the software in conditions as close as possible to the operation's conditions. The test cases should cover both normal and stress scenarios of software functioning.</p><p>The software quality assurance process has its difficulties:</p><p>• the absence of a real control object or its components for a sufficiently long time (sometimes up to the final stage of development); • the impossibility (for example, because of risk of physical destruction or high costs) of tests in some operating modes.</p><p>Modeling at the earliest possible stages of software development increases testing capability for the real system and reduces the costs and time of achieving the required software quality. It allows checking both separate system components and the entire architecture of the designed system. Let emphasize that CPS development heightens concerns about system trustworthiness, usability which include security, privacy, safety, reliability, resilience, and efficiency <ref type="bibr">[13]</ref>.</p><p>The CPS reliability is conditioned by both the reliability of physical components and software modules' reliability. The reliability assessment problem for physical objects is well-developed, while the reliability estimation for software systems is still an unsolved issue. For example, Antonov et al. <ref type="bibr" target="#b12">[14]</ref> performed an overview of software reliability estimation quantitative methods and concluded that current numerical methods do not provide credible estimations of reliability in a classical probability domain. That's why the term of software reliability is widely substituted by the term of software quality which, according to the standard ISO/IEC 25010:2011 <ref type="bibr" target="#b13">[15]</ref>, is "the degree to which a product or system can be used by specific users to meet their needs to achieve specific goals with effectiveness, efficiency, freedom from risk and satisfaction in specific contexts of use." ISO/IEC standards introduce some metrics to estimate different software quality factors, so by their values, it might be possible to draw indirect conclusions about the reliability of specific software under a set of specific conditions.</p><p>That is why the software reliability estimation is usually performed by testing the software in conditions as close as possible to the operation's conditions. The test cases should cover both normal and stress scenarios of software functioning.</p><p>The software quality assurance process has its difficulties:</p><p>• the absence of a real control object or its components for a sufficiently long time (sometimes up to the final stage of development); • the impossibility (for example, because of risk of physical destruction or high costs) of tests in some operating modes.</p><p>Modeling at the earliest possible stages of software development increases testing capability for the real system and reduces the costs and time of achieving the required software quality. It allows checking both separate system components and the entire architecture of the designed system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Comparison of Model Types Regarding Cyberphysical Systems</head><p>Simulation is an integral part of the design and development of any industrial system. It helps to understand and predict a physical object's behavior and the properties of control algorithms; assess system reliability and safety and fault tolerance; know how the system will react to control; divide the system into functional modules; design the data structure and communication channels and so on. All of these problems are addressed using various models. Table <ref type="table" target="#tab_0">1</ref> shows a comparison of different models and an assessment of their potential for use for a physical or digital component ("+" or "−" signs indicate whether the model is suitable for a specific purpose or not). The verification is possible in very restrictive cases (see, for example, papers <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b15">17]</ref>).</p><p>Full-scale test prototypes can be built to test and verify the interaction of system elements. There is a preliminary fitting to the real equipment; the final integration with the physical object is carried out during the commissioning stage. In the first place, the work requires time, labor and cost, because designing and building a full-scale prototype requires a lot of resources, and such tests reveal errors and inconsistencies in the last stages of system development. Correcting inconsistencies requires hard work to retest the system.</p><p>With the progress of the computational facilities, the concept of digital twins of cyberphysical systems has been gaining popularity. The digital twin runs in a purely virtual, computer environment. It receives the information about the physical object either from a simulation or from a real object data via the Internet of Things.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Restrictions and Application of Digital Models of Cyberphysical Systems</head><p>With the virtual models of cyberphysical systems, one can configure the system and test the interaction between system components and system modes at any development stage. There are numerous successful applications of the digital twin for different systems and purposes.</p><p>For example, Lemay et al. <ref type="bibr" target="#b17">[18]</ref>, using a number of virtual machines running within a computational cluster, created a digital training model for a SCADA (supervisory control and data acquisition) system of a reference power plant. They used some simulations of physical processes and PLCs, sensors, and actuators. The model allowed to imitate a set of cyberattacks to a reference SCADA system, albeit not showed high productivity.</p><p>Alves et al. <ref type="bibr" target="#b18">[19]</ref> for cybersecurity protective measures tests applied modularity principles to the design and construction of a digital model of a SCADA system. They implemented every SCADA element (server, workstation, PLC, sensor, et cetera) as a separate software module that allows model scaling in a wide range.</p><p>This way the design and deployment of digital twins of cyberphysical systems is an essential and expanding technology. However, it is necessary to understand and take into account the boundaries of digital models. Let us discuss some use cases for the digital twin and draw out the possible limitations and ways to mitigate the limitations.</p><p>First, with a digital model, one hardly (if ever) can obtain any data about the real system's productivity. The system productivity depends on specific models of installed computers and controllers, network capacity, and many other conditions. A virtual model allows getting just some productivity estimates like algorithm performance.</p><p>Second, any specific manufacturer's hardware and equipment have their features and restrictions; some internal details of equipment functioning are proprietary information and trade secrets, so they cannot be implemented entirely in a virtual model. It means the virtual model will use some "average," "neutral" models of the equipment, which also will not allow getting an accurate model.</p><p>Timing is a central architectural concern of a CPS [13], so it is essential to guarantee a transparent mapping of the dynamics of a real cyberphysical system and the digital model. Lee and Seshia <ref type="bibr" target="#b19">[20]</ref>, in chapter 1 of their book, describe the problem in detail.</p><p>The time-dependent dynamic properties of physical objects are usually described by systems of differential equations (equations of motion, equations of heat conduction, equation of electrodynamics), where time is a variable. Thus, a physical object's digital model is a solution to a system of differential equations describing its behavior. The process of solving math problems usually does not require real-time computation. The model's digital component can receive the results of calculations performed in advance, and the virtual model will approximate them.</p><p>Digital twins usually implement software models of sensors and controllers: they can use either software emulation (many manufacturers provide emulators) of software models of state machines or black boxes. Note that a program thread's CPU time is not real physical time because a computer represents a time stream by incrementing a hardwaredependent counter. Thus, the device digital model's temporal properties may differ from the properties of the real device. We summarize these considerations in Table <ref type="table" target="#tab_1">2</ref>. Maintaining a uniform timeline is essential for I&amp;C systems. On the other hand, cloud systems with many virtual machines have multiple context switching events between processes inside the computer and between virtual machines inside the host. This raises another important problem-the problem of synchronizing components in the digital model. Currently, the issue of synchronizing the system of virtual machines has not been studied in detail, but the problem is recognized. Thus, VMware <ref type="bibr" target="#b20">[21]</ref> says that differences between virtual and real machines "can still sometimes cause timekeeping inaccuracies and other problems in software running in a virtual machine." Therefore, there is always a risk that the necessary synchronization accuracy would never be achieved in the digital model of the CPS.</p><p>One of the promising functions of digital twins is developing cyber defense methods and testing the system's resistance to cyber threats. Here cybersecurity is a set of actions and measures (controls) to prevent, detect and respond to malicious actions against the system. Indeed, a digital twin makes it possible to carry out any tests without risk of real system damaging, and it is easy enough to return a digital model to its original state even after the destruction of the digital twin because of a cyberattack. Some elements of a physical infrastructure could become an attack starting point (for example, an intruder gets physical access to a server); the attack goal could be reducing the system availability as in case of a denial-of-service attack (DoS-attack).</p><p>Considerations of the previous paragraph show that digital twins can be used to find the vulnerability points in a cyberphysical system, divide the system into the cybersecurity levels, investigate cyberattack propagation paths, and estimate the attack consequences. However, they are not suitable for researching cyberattacks' temporal characteristic and studying the cyberattacks on the physical infrastructure (physical access to servers, bridges, et cetera).</p><p>The limitations described above can be partially removed for a model in which virtual components interact with some real parts. For example, you can include several real sensors and PLCs in the model. The sensors will transmit their output to the virtual environment; the physical process model will compute the inputs to the PLC and transfer the signals to the standard PLC interfaces. This kind of partial integration will allow us to check the timing of some control signals and simplify the commissioning process.</p><p>The principle of combining real and model components in modeling is known as Hardware-in-the-Loop simulation. In our opinion, there is a consensus in the industry (see, for example, papers <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>) when HiL simulation uses a computer as a virtual representation of the object model and real controllers or field devices. So, HiL usually is related to Levels 0-1 (Production Process, Sensing and Actuation) of IEC 62264-3 standard <ref type="bibr" target="#b23">[24]</ref>. There are two specific features of the proposed digital twin approach. The first one that an I&amp;C system spans across levels 1-3 (Sensing and Actuation; Monitoring, Supervision and Control; Manufacturing Operations and Control) and the digital twin may include real components at all levels. The second one that real components are not only hardware but else software modules.</p><p>To highlight this feature, this configuration of the digital twin is called a heterogeneous digital twin in the framework of this work. A heterogeneous digital model can facilitate the process of integrating components into a single system because the complexity and labor intensity of creating and maintaining/updating a heterogeneous virtual model is much less than that of a full-scale test complex.</p><p>The scenarios of digital twin applications also depend on the modeled system's lifecycle stage. Table <ref type="table" target="#tab_2">3</ref> shows the possible scenarios depending on the lifecycle stage. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Digital Twin Architecture and Configuration Management</head><p>So far, we have not considered the hierarchical structure of an I&amp;C system, its lifecycle, and the problem of the synchronization keeping between a digital twin and the real object. A digital twin developer should consider that the digital twin will co-evolve with the real I&amp;C system during the lifecycle from a very high-level abstract representation to a very detailed representation. Moreover, almost all real systems have subsystems, and the subsystems, in turn, include further subdivisions, etc. The system requirements usually follow the hierarchical structure of the system itself. To consider the digital twin requirements of a hierarchical system, it is necessary to coordinate the requirements between different architecture levels of the twin.</p><p>Let us illustrate this reasoning with an example of a system having one nesting level. In the case of hierarchical systems with more levels, we may use an inductive approach.</p><p>The subsystems' structure is not developed yet at the early design stage, but the set of subsystems is identified, and the relations between them are already known. One can present the system as a graph with components as vertices A and with edges representing the binary relation of directed dependence between components in the system operation frame. The subsystem has some assigned properties.</p><p>The developers of a digital twin face some questions. Suppose a property is assigned to the subsystem, and during the system development, the subsystem developers implement the property in a specific way. Then, how do we make the digital twin co-evolve correctly with the system prototype?</p><p>Let us consider two graphs. The left one, G(X, E), takes into consideration the structure of subsystems, and the second one, J(Y, H), describes the high-level abstraction or top-level system structure (see Figure <ref type="figure" target="#fig_2">2</ref>). J must be evidently a result of graph contraction G: J = F(G) that is not a one-to-one mapping.</p><p>to the subsystem, and during the system development, the subsystem developers implement the property in a specific way. Then, how do we make the digital twin co-evolve correctly with the system prototype?</p><p>Let us consider two graphs. The left one, , , takes into consideration the structure of subsystems, and the second one, , , describes the high-level abstraction or top-level system structure (see Figure <ref type="figure" target="#fig_2">2</ref>). must be evidently a result of graph contraction : that is not a one-to-one mapping. The problem solution becomes simple if the digital twin is initially designed as a system of nested containers. Every container serves as a framework for lower-level components and puts some additional constraint from upper-level requirements onto the container elements.</p><p>The second problem we need to pay special attention to is synchronization between the digital twin and the real I&amp;C system and the configuration management. Indeed, the digital twin designer must maintain the equivalence between the digital model and the real I&amp;C system (see Figure <ref type="figure" target="#fig_7">3</ref>). However, below (see Section 6), it will be shown that the full equivalence might be unachievable in practice. Nevertheless, two co-evolving systems must synchronize their configurations for the equivalent sets. Let us say a few words about our understanding of the equivalent configurations. Software Engineering Body of Knowledge (SWEBOK) <ref type="bibr" target="#b24">[25]</ref> defines configuration as "a collection of specific versions of hardware, firmware, or software items combined according to specific build procedures to serve a particular purpose." We will simplify this definition for the modeling and say that configuration is a set of backbone components (hardware The problem solution becomes simple if the digital twin is initially designed as a system of nested containers. Every container serves as a framework for lower-level components and puts some additional constraint from upper-level requirements onto the container elements.</p><p>The second problem we need to pay special attention to is synchronization between the digital twin and the real I&amp;C system and the configuration management. Indeed, the digital twin designer must maintain the equivalence between the digital model and the real I&amp;C system (see Figure <ref type="figure" target="#fig_7">3</ref>). However, below (see Section 6), it will be shown that the full equivalence might be unachievable in practice. Nevertheless, two co-evolving systems must synchronize their configurations for the equivalent sets.</p><p>to the subsystem, and during the system development, the subsystem developers implement the property in a specific way. Then, how do we make the digital twin coevolve correctly with the system prototype?</p><p>Let us consider two graphs. The left one, ( , ) , takes into consideration the structure of subsystems, and the second one, ( , ), describes the high-level abstraction or top-level system structure (see Figure <ref type="figure" target="#fig_2">2</ref>). must be evidently a result of graph contraction : = ( ) that is not a one-to-one mapping. The problem solution becomes simple if the digital twin is initially designed as a system of nested containers. Every container serves as a framework for lower-level components and puts some additional constraint from upper-level requirements onto the container elements.</p><p>The second problem we need to pay special attention to is synchronization between the digital twin and the real I&amp;C system and the configuration management. Indeed, the digital twin designer must maintain the equivalence between the digital model and the real I&amp;C system (see Figure <ref type="figure" target="#fig_7">3</ref>). However, below (see Section 6), it will be shown that the full equivalence might be unachievable in practice. Nevertheless, two co-evolving systems must synchronize their configurations for the equivalent sets. Let us say a few words about our understanding of the equivalent configurations. Software Engineering Body of Knowledge (SWEBOK) <ref type="bibr" target="#b24">[25]</ref> defines configuration as "a collection of specific versions of hardware, firmware, or software items combined Let us say a few words about our understanding of the equivalent configurations. Software Engineering Body of Knowledge (SWEBOK) <ref type="bibr" target="#b24">[25]</ref> defines configuration as "a collection of specific versions of hardware, firmware, or software items combined according to specific build procedures to serve a particular purpose." We will simplify this definition for the modeling and say that configuration is a set of backbone components (hardware and software) currently installed in the system. It means that some key components must be identified at the model design stage, and the synchronization procedure for the maintenance of the equivalence of those key components must be implemented over the lifecycle stages.</p><p>For example, if the CPU model is supposed to be the configuration element, then the digital twin must emulate the same CPU which is used in the real I&amp;C system. On the other hand, a model designer may consider the difference of two executable programs insignificant and take into account only the differences in configuration files of these programs. Below, we will show an example of a configuration description for a real use case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">The Realization of the Composite Heterogeneous Digital Twin for Instrumentation and Control System of the Nuclear Power Plant</head><p>Basing on the proposed approach of the heterogeneous digital twin, we designed and built a heterogeneous digital model of the upper-level control system (ULCS) of the I&amp;C system of a nuclear power plant <ref type="bibr" target="#b10">[11]</ref>. The ULCS offers the integration functionality for various parts of the I&amp;C system and ensures the interaction of all other systems of the I&amp;C NPP system. The ULCS represents a modern digital networked distributed control system. The main functions of the ULCS are monitoring and control of the NPP state. The functions include safety-related functions and auxiliary functions; the last are selfdiagnostic, archiving plant-state data in the database, and providing time synchronization for other components of the I&amp;C system. The ULCS system provides the human-machine interface with the plant equipment and contains about thirty workstations in a typical configuration. An essential characteristic of the system is its functioning in real-time while providing a human-machine interface with a human operator. To increase the systems' reliability, design measures have been taken to provide the system redundancy (communication lines and computing nodes are backed up).</p><p>The system has a modular architecture that allows increasing the number of operator's workplaces and processed information. In a basic configuration for NPP, the total volume of the managed database is about 10 6 signals, with a performance of about several thousand signals per second.</p><p>The ULCS consists (see Figure <ref type="figure">4</ref>) of servers, active and passive network equipment, workstations, auxiliary equipment of the cabinets (uninterruptible power sources, printers, et cetera). The information is transferred over Ethernet networks; all key nodes and data paths are redundant and work in parallel, providing hot-spare redundancy. The ULCP software works under the industrial Linux-based operating system LICS OS <ref type="bibr" target="#b25">[26]</ref>. Precise time sources provide a unified time scale within the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>stages.</head><p>For example, if the CPU model is supposed to be the configuration element, then the digital twin must emulate the same CPU which is used in the real I&amp;C system. On the other hand, a model designer may consider the difference of two executable programs insignificant and take into account only the differences in configuration files of these programs. Below, we will show an example of a configuration description for a real use case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">The Realization of the Composite Heterogeneous Digital Twin for Instrumentation and Control System of the Nuclear Power Plant</head><p>Basing on the proposed approach of the heterogeneous digital twin, we designed and built a heterogeneous digital model of the upper-level control system (ULCS) of the I&amp;C system of a nuclear power plant <ref type="bibr" target="#b10">[11]</ref>. The ULCS offers the integration functionality for various parts of the I&amp;C system and ensures the interaction of all other systems of the I&amp;C NPP system. The ULCS represents a modern digital networked distributed control system. The main functions of the ULCS are monitoring and control of the NPP state. The functions include safety-related functions and auxiliary functions; the last are self-diagnostic, archiving plant-state data in the database, and providing time synchronization for other components of the I&amp;C system. The ULCS system provides the human-machine interface with the plant equipment and contains about thirty workstations in a typical configuration. An essential characteristic of the system is its functioning in real-time while providing a human-machine interface with a human operator. To increase the systems' reliability, design measures have been taken to provide the system redundancy (communication lines and computing nodes are backed up).</p><p>The system has a modular architecture that allows increasing the number of operator's workplaces and processed information. In a basic configuration for NPP, the total volume of the managed database is about 10 6 signals, with a performance of about several thousand signals per second.</p><p>The ULCS consists (see Figure <ref type="figure">4</ref>) of servers, active and passive network equipment, workstations, auxiliary equipment of the cabinets (uninterruptible power sources, printers, et cetera). The information is transferred over Ethernet networks; all key nodes and data paths are redundant and work in parallel, providing hot-spare redundancy. The ULCP software works under the industrial Linux-based operating system LICS OS <ref type="bibr" target="#b25">[26]</ref>. Precise time sources provide a unified time scale within the system. The ULCS digital twin is a kind of a composite digital twin that combines several small (discrete) digital twins of the equipment and software of the ULCS. The digital twin combines the computational, analytic models and hardware components and allows to describe, diagnose, predict and simulate the states and behaviors of the ULCS.</p><p>The ULCS digital twin receives data from the supplementary software-based digital twins of the adjacent systems of the NPP. The supplementary digital twins include both model-based sources of the data and some previously recorded data from the real equipment dynamics.</p><p>The auxiliary digital twins are used to simulate plant dynamics for normal and some abnormal modes of the NPP operation, to predict and simulate the states and behavior of the real ULCS depending on the plant data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">The Architecture of the ULCS Digital Twin</head><p>The ULCS digital twin includes some elements of the ULCS system's real hardware and about a hundred virtual components representing ULCS computers and network devices (see Figure <ref type="figure" target="#fig_9">5</ref>). small (discrete) digital twins of the equipment and software of the ULCS. The digital twin combines the computational, analytic models and hardware components and allows to describe, diagnose, predict and simulate the states and behaviors of the ULCS.</p><p>The ULCS digital twin receives data from the supplementary software-based digital twins of the adjacent systems of the NPP. The supplementary digital twins include both model-based sources of the data and some previously recorded data from the real equipment dynamics.</p><p>The auxiliary digital twins are used to simulate plant dynamics for normal and some abnormal modes of the NPP operation, to predict and simulate the states and behavior of the real ULCS depending on the plant data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">The Architecture of the ULCS Digital Twin</head><p>The ULCS digital twin includes some elements of the ULCS system's real hardware and about a hundred virtual components representing ULCS computers and network devices (see Figure <ref type="figure" target="#fig_9">5</ref>). The real hardware comprises a timeserver, a switch cabinet, a workstation cabinet with an operator terminal, server cabinet.</p><p>A real timeserver acts as the time synchronization source via the Network Time Protocol (NTP). Switch cabinet and server cabinet hardware elements are used to model the behavior of server and workstation system units in the cabinet (for example, uninterruptible power supply (UPS) control and monitoring). The workstation cabinet is identical to the real operator's terminal.</p><p>The virtual machines for every server and workstation physically run on a host server under LICS OS and QEMU/KVM hypervisor <ref type="bibr" target="#b26">[27,</ref><ref type="bibr">28]</ref>. The workstation physical computer runs under LICS OS as well. The specifications of real and virtual components are summarized in Tables <ref type="table" target="#tab_3">4 and 5</ref> Figure <ref type="figure" target="#fig_9">5</ref>. The outline of the heterogeneous digital model of the ULCS.</p><p>The real hardware comprises a timeserver, a switch cabinet, a workstation cabinet with an operator terminal, server cabinet.</p><p>A real timeserver acts as the time synchronization source via the Network Time Protocol (NTP). Switch cabinet and server cabinet hardware elements are used to model the behavior of server and workstation system units in the cabinet (for example, uninterruptible power supply (UPS) control and monitoring). The workstation cabinet is identical to the real operator's terminal.</p><p>The virtual machines for every server and workstation physically run on a host server under LICS OS and QEMU/KVM hypervisor <ref type="bibr" target="#b26">[27,</ref><ref type="bibr">28]</ref>. The workstation physical computer runs under LICS OS as well. The specifications of real and virtual components are summarized in Tables <ref type="table" target="#tab_3">4 and 5</ref>.</p><p>The ULCS network-related properties simulation is an important part of the digital twin realization because the ULCS is a distributed network control system.</p><p>The ULCS components interact with each other using TCP/IP and UDP/IP protocols. As we discussed earlier, operational servers, workstations, and Ethernet networks are redundant, and the model must reflect both logical and physical redundancy of the system. Since the model is heterogeneous, it is assumed to interact with the real hardware and software components via the network. The structure of the digital twin network is equivalent to the structure of the ULCS network. Most of the network-related elements in the digital twin are built on virtual components. Virtual switch software OpenVSwitch <ref type="bibr" target="#b29">[31]</ref> is a tool for network topology construction within the model. Thereby, every real switch is mapped to a virtual switch, and the commutation of virtual machines and virtual switches within the virtual network corresponds to the ULCS network topology. VLAN assignment within software switches allows modeling the physical separation of redundant Ethernet channels. Thus, we model network redundancy where any single failure in the network path does not break the system connectivity.   <ref type="bibr" target="#b28">[30]</ref> ansible <ref type="bibr" target="#b28">[30]</ref> To provide the connection between virtual machines and real equipment, the host OS network stack is connected to the virtual switches so that the virtual machines can access the external hardware via a real Ethernet network.</p><p>Figures <ref type="figure" target="#fig_10">6 and 7</ref> present an illustration of the described approach. Suppose we have a server S1 belonging to one subsystem and two other computers, server S2 and workstation W, belonging to another subsystem. All network traffic goes via two independent and physically separated Ethernet networks named as main network and standby network. Every subsystem also has its own set of Ethernet switches containing at least two devices: one for the main network, the other for the standby network. Here in the figure, the boxes SM1 and SM2 are the switches for the main network, the boxes SS1 and SS2 are the switches for the standby network. The network traffic between the I&amp;C system components passes via Ethernet lines between the switches (bold lines on Figure <ref type="figure">4</ref>). Now let us show the implementation of the presented topology within the digital model. Virtual machines VS1, VS2, VW correspond to the real machines S1, S2, W, virtual switches VSM1, VSM2, VSS1, and VSS2 implemented as OpenVSwitch instances correspond to the hardware Ethernet switches SM1, SM2, SS1, and SS2, respectively. The switches of the main network are linked via trunk ports with the tag "VLAN10", the switches of the standby network are linked via trunk ports with the tag "VLAN20".</p><p>The traffic to access ports (ports leading to terminal devices like a server or a workstation) of the virtual switches is tagged with the corresponding VLAN label (VLAN10 or VLAN20). This is the way we model the physical separation of two Ethernet networks.</p><p>To allow model interaction with external hardware (for example, with a real workstation), we created an auxiliary virtual switch instance in the host server. This instance is linked with the model's main network via trunk port with the tag "VLAN10" and the standby model network via trunk port with the tag "VLAN20". The real host Ethernet adapters are connected with the corresponding access ports of the auxiliary virtual switch (port tagged "VLAN10" for the main network, port tagged "VLAN20" for the standby network.</p><p>The virtual machines and the real hardware communicate via TCP/IP and UDP/IP network protocols like SNMP (Simple Network Management Protocol) through real Ethernet networks. To work with the operator graphical environment, we pass the graphics via Spice network protocol <ref type="bibr">[32]</ref> to the real workstation. The Spice client software was also installed onto the virtual machines. 021, 9, x FOR PEER REVIEW Figures <ref type="figure" target="#fig_10">6 and 7</ref> present an illustration of the described approach. Suppose we have a server S1 belonging to one subsystem and two other computers, server S2 and workstation W, belonging to another subsystem. All network traffic goes via two independent and physically separated Ethernet networks named as main network and standby network. Every subsystem also has its own set of Ethernet switches containing at least two devices: one for the main network, the other for the standby network. Here in the figure, the boxes SM1 and SM2 are the switches for the main network, the boxes SS1 and SS2 are the switches for the standby network. The network traffic between the I&amp;C system components passes via Ethernet lines between the switches (bold lines on Figure <ref type="figure">4</ref>).    <ref type="figure" target="#fig_11">and 7</ref> present an illustration of the described approach. Suppose we have a server S1 belonging to one subsystem and two other computers, server S2 and workstation W, belonging to another subsystem. All network traffic goes via two independent and physically separated Ethernet networks named as main network and standby network. Every subsystem also has its own set of Ethernet switches containing at least two devices: one for the main network, the other for the standby network. Here in the figure, the boxes SM1 and SM2 are the switches for the main network, the boxes SS1 and SS2 are the switches for the standby network. The network traffic between the I&amp;C system components passes via Ethernet lines between the switches (bold lines on Figure <ref type="figure">4</ref>).    </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">The Data Synchronization between the Digital Twin and the Real ULCS</head><p>To facilitate the configuration management process, during the digital twin design and implementation we developed a structure of configuration description. Configuration structure is based on the approach of the system of nested containers. The digital twin configuration is the set of its components' configurations (for example, servers and workstations). The configuration of every component may be unfolded further, generating a configuration tree. An example of UML (unified modelling language) diagram representing a configuration tree node is shown below in Figure <ref type="figure" target="#fig_15">8</ref>.  The developed structure is backed by a bi-directional synchronization technique built upon ansible <ref type="bibr" target="#b28">[30]</ref> software. It allows solving the problems of identical configuration maintenance in the digital twin and the real ULCS, digital twin cloning in a cloud-based environment, software deployment preparation.</p><p>However, the model operation process showed some peculiarities in the heterogeneous model design that result from the not full equivalence of a digital twin and the real object.</p><p>For example, in the beginning, the computer hardware emulated by the hypervisor (like controllers, network adapters) was chosen to be maximally close to the real one. However, the performance of software emulation of the devices did not satisfy the needs of the I&amp;C system, and the model showed poor network throughput. So, we had to switch over to paravirtual devices (for the description of software emulated and paravirtual devices see, e.g., papers <ref type="bibr" target="#b30">[33,</ref><ref type="bibr" target="#b31">34]</ref>) and give up the idea of maximal similarity between the emulated and real hardware. The developed structure is backed by a bi-directional synchronization technique built upon ansible <ref type="bibr" target="#b28">[30]</ref> software. It allows solving the problems of identical configuration maintenance in the digital twin and the real ULCS, digital twin cloning in a cloud-based environment, software deployment preparation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.">The Timekeeping in the Digital Twin</head><p>However, the model operation process showed some peculiarities in the heterogeneous model design that result from the not full equivalence of a digital twin and the real object.</p><p>For example, in the beginning, the computer hardware emulated by the hypervisor (like controllers, network adapters) was chosen to be maximally close to the real one. However, the performance of software emulation of the devices did not satisfy the needs of the I&amp;C system, and the model showed poor network throughput. So, we had to switch over to paravirtual devices (for the description of software emulated and paravirtual devices see, e.g., papers <ref type="bibr" target="#b30">[33,</ref><ref type="bibr" target="#b31">34]</ref>) and give up the idea of maximal similarity between the emulated and real hardware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.">The Timekeeping in the Digital Twin</head><p>Virtualization is a key technology used in the presented ULCS digital twin. We encountered some difficulties in the provision of a timekeeping mechanism between the components of the digital twin.</p><p>The real I&amp;C system uses NTP protocol <ref type="bibr" target="#b32">[35]</ref> for the timekeeping, so the digital twin follows this approach. We found few research papers and guides for timekeeping in the virtual environment, and they only give general advice without real use-case analysis (see, for example, <ref type="bibr" target="#b20">[21]</ref> and <ref type="bibr" target="#b33">[36]</ref>).</p><p>The implementation of recommended settings <ref type="bibr" target="#b34">[37]</ref> brought a problem. Under low load, the system after the initial synchronization period stays in the synchronized state, but under heavy load, clock offsets vary within a large interval that, in our case, achieves up to hundreds of milliseconds (see the left picture in Figure <ref type="figure" target="#fig_17">9</ref>). The offset increases, achieves a threshold value, and then, according to the NTP protocol specification, is set to zero forcibly. The analysis of the problem led us to the task of clock driver choice. virtual environment, and they only give general advice without real use-case analysis (see, for example, <ref type="bibr" target="#b20">[21]</ref> and <ref type="bibr" target="#b33">[36]</ref>). The implementation of recommended settings <ref type="bibr" target="#b34">[37]</ref> brought a problem. Under low load, the system after the initial synchronization period stays in the synchronized state, but under heavy load, clock offsets vary within a large interval that, in our case, achieves up to hundreds of milliseconds (see the left picture in Figure <ref type="figure" target="#fig_17">9</ref>). The offset increases, achieves a threshold value, and then, according to the NTP protocol specification, is set to zero forcibly. The analysis of the problem led us to the task of clock driver choice. Note that the time offset on the left part of Figure <ref type="figure" target="#fig_17">9</ref> is non-negative. It means the virtual machine system clock keeps behind the timeserver clock. In that case, we used the paravirtual clock driver "kvm-clock", the default clock driver for QEMU/KVM hypervisor. We suppose that simultaneously working virtual machines block one to another the access to the hypervisor clock and skip the required interrupts. In our opinion, the usage of the paravirtual clock driver in this case created a bottleneck.</p><p>So, we switched to another clock driver, emulated TSC (time step counter) clock. This is an evenly increased processor register, a counter of CPU cycles. It is stable for modern CPUs, does not depend on the CPU frequency's dynamical changes, and is even unified within a multiprocessor system. After the reconfiguration of virtual machines, we managed to achieve the required time synchronization accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Results and Discussion</head><p>The design and accurate realization of a digital twin remains a challenging task. In the paper, we consider instrumentation and control systems (I&amp;C systems) as cyberphysical systems (CPS) of the Industry 4.0 concept and, in particular, deal with the problem of the design of digital twins of CPS in application to I&amp;C systems. The proposed heterogeneous digital twin can facilitate accurate reproduction of the real I&amp;C system properties. The main advantages are the precise reproduction of time dynamics and interaction, the Note that the time offset on the left part of Figure <ref type="figure" target="#fig_17">9</ref> is non-negative. It means the virtual machine system clock keeps behind the timeserver clock. In that case, we used the paravirtual clock driver "kvm-clock", the default clock driver for QEMU/KVM hypervisor. We suppose that simultaneously working virtual machines block one to another the access to the hypervisor clock and skip the required interrupts. In our opinion, the usage of the paravirtual clock driver in this case created a bottleneck.</p><p>So, we switched to another clock driver, emulated TSC (time step counter) clock. This is an evenly increased processor register, a counter of CPU cycles. It is stable for modern CPUs, does not depend on the CPU frequency's dynamical changes, and is even unified within a multiprocessor system. After the reconfiguration of virtual machines, we managed to achieve the required time synchronization accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Results and Discussion</head><p>The design and accurate realization of a digital twin remains a challenging task. In the paper, we consider instrumentation and control systems (I&amp;C systems) as cyberphysical systems (CPS) of the Industry 4.0 concept and, in particular, deal with the problem of the design of digital twins of CPS in application to I&amp;C systems. The proposed heterogeneous digital twin can facilitate accurate reproduction of the real I&amp;C system properties. The main advantages are the precise reproduction of time dynamics and interaction, the behavior of auxiliary devices, and network topology. We propose a heterogeneous digital twin concept for an I&amp;C system of levels 1-3 of IEC 62264-3 standard <ref type="bibr" target="#b21">[22]</ref> (Sensing and Actuation; Monitoring, Supervision and Control; Manufacturing Operations and Control). The heterogeneous twin is similar to the hardware-in-the-loop digital twins. It consolidates software and hardware components of different system levels and combines specific analytical software components of digital twin and the real software of the simulated system. Compared with purely analytical models and full-scale testbeds, this type of digital twins extends the list of their applications at various lifecycle stages.</p><p>Incidentally, the heterogeneous digital twins have fewer hardware units than the full-scale testbeds, without the loss of accuracy in the modeling of system dynamical characteristics. On the other hand, compared with a pure software model, the model accuracy is better by incorporating real components.</p><p>System cybersecurity assessment is a relatively new scenario of digital twin applications. Digital twins of I&amp;C systems can be used to identify vulnerability points, divide the system into cybersecurity levels, investigate the propagation paths of attacks, and assess the consequences of cyber-attacks.</p><p>The realization and application of a digital twin allow decreasing software quality assurance costs because the digital twin is more available for the tests in various modes. We got the successful practice of digital twin application for quality assurance. The experience is based on the fact that a digital twin, being in many cases a rough copy of a real object, changes test coverage in comparison to the real object. Particularly, it appears in the fact that some of the errors that would most likely remain undetected during normal testing on a real object are detected on a digital twin. Moreover, it is possible to clone more the digital twin entity more than once and increase test coverage in this way.</p><p>We have demonstrated the heterogeneous digital model's effectiveness in the course of the development of the upper-level control system (ULCS) for a nuclear power plant. The ULCS composite digital twin includes about one hundred virtual and real items (servers, workstations, network equipment) and fully reproduces the real system properties, including the redundancy in components and networks. The ULCS digital twin is used to validate the system deployment during the commissioning, measure and analyze performance characteristics of the ULCS, test some special modes that may be hard to conduct on the real system due to cost or safety restrictions, and correct associated errors. Our experience shows that the percent of errors related to the special modes is about 15%-20% from all software errors detected at late software quality assurance stages.</p><p>In practice we conclude that a heterogeneous digital twin only reduces but not eliminates the modeling approach restrictions since it is difficult to achieve the complete equivalence between a digital twin and the simulated system. The weak points of the heterogeneous digital twin still are: graphical mode and HMI productivity in a virtual environment, timekeeping issues, differences in general network throughput in virtual and real components, and difficulties in achieving operational relevance between the digital twin and the modeled real object in the presence of bugs and errors. This should be taken into account when organizing the digital twin's synchronization and the real system and correlating the data obtained from the digital twin and the real object.</p><p>This work is the result of the creation of the ULCS NPP digital twin and its application at the stage of development and deployment of a real system. We plan to continue working with the digital twin at other stages of the ULCS lifecycle. The main focus will be on improving the synchronization mechanisms of the digital twin and the real system, increasing the accuracy of the models, first of all, in dynamical and temporal characteristics, and the development of techniques that allow diagnostics and prognostics of the behavior of a real system on a digital twin.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. A sketch of the main components of an I&amp;C system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. A sketch of the main components of an I&amp;C system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Graphs of I&amp;C information model with subsystem hierarchy (left) and without it (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>1 Figure 3 .</head><label>13</label><figDesc>Figure 3. The equivalence of the I&amp;C systems and its digital model. The part of the I&amp;C system that is not covered with the model is shown as a set B1; the model components that have not counterparts in the real system are shown as sets A1, A2, A3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Graphs of I&amp;C information model with subsystem hierarchy (left) and without it (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Graphs of I&amp;C information model with subsystem hierarchy (left) and without it (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>1 Figure 3 .</head><label>13</label><figDesc>Figure 3. The equivalence of the I&amp;C systems and its digital model. The part of the I&amp;C system that is not covered with the model is shown as a set B1; the model components that have not counterparts in the real system are shown as sets A1, A2, A3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. The equivalence of the I&amp;C systems and its digital model. The part of the I&amp;C system that is not covered with the model is shown as a set B 1 ; the model components that have not counterparts in the real system are shown as sets A 1 , A 2 , A 3 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 4 .Figure 4 .</head><label>44</label><figDesc>Figure 4. The outline of the upper-level control system of an NPP ULCS.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. The outline of the heterogeneous digital model of the ULCS.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. A fragment of the real ULCS network topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. A fragment of the digital twin network topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. A fragment of the real ULCS network topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. A fragment of the digital twin network topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. A fragment of the digital twin network topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Example of UML representation of configuration node for a digital twin.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Example of UML representation of configuration node for a digital twin.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>2021, 9 ,</head><label>9</label><figDesc>x FOR PEER REVIEW 15 of 18</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. Left: NTP offset between the local system clock and the timeserver clock before the system clock reconfiguration. Right: NTP offset between the local system clock and the timeserver clock after the system clock reconfiguration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. (Left): NTP offset between the local system clock and the timeserver clock before the system clock reconfiguration. (Right): NTP offset between the local system clock and the timeserver clock after the system clock reconfiguration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Comparison of the properties of the models.</figDesc><table><row><cell>Type of Model</cell><cell>Motivation</cell><cell>Physical</cell><cell>Cyber</cell></row><row><cell></cell><cell>Description of a physical object behavior</cell><cell>+</cell><cell>−</cell></row><row><cell></cell><cell>Verification and validation of algorithms (system grey/white-box design)</cell><cell>−</cell><cell>+</cell></row><row><cell>Analytical</cell><cell>Verification of timing characteristics a</cell><cell>+</cell><cell>±</cell></row><row><cell></cell><cell>Staff training</cell><cell>+</cell><cell>±</cell></row><row><cell></cell><cell>Design of the control (system black box design)</cell><cell>+</cell><cell>+</cell></row><row><cell>Statistical</cell><cell>Estimation of reliability and stability</cell><cell>+</cell><cell>+</cell></row><row><cell>Functional</cell><cell>System design</cell><cell>+</cell><cell>+</cell></row><row><cell>Data and data flow</cell><cell>Data representation and system logics without regard to real-time system behavior</cell><cell>−</cell><cell>+</cell></row><row><cell></cell><cell>Validation of system design</cell><cell>+</cell><cell>+</cell></row><row><cell></cell><cell>Validation of models</cell><cell>+</cell><cell>+</cell></row><row><cell>Full scale</cell><cell>Validation of time behavior</cell><cell>+</cell><cell>+</cell></row><row><cell></cell><cell>Validation of system safety and security</cell><cell>+</cell><cell>+</cell></row><row><cell></cell><cell>Staff training</cell><cell>+</cell><cell>+</cell></row><row><cell></cell><cell>Validation of system logical structure and interfaces</cell><cell>+</cell><cell>+</cell></row><row><cell>Virtual (digital twin)</cell><cell>Validation of discrete (state-by-state) time behavior Validation of system cybersecurity (integrity and confidentiality)</cell><cell>+ +</cell><cell>+ ±</cell></row><row><cell></cell><cell>Staff training</cell><cell>+</cell><cell>+</cell></row><row><cell></cell><cell>Validation of system logical structure and interfaces</cell><cell>+</cell><cell>+</cell></row><row><cell>Heterogeneous: virtual and</cell><cell>Validation of discrete (state-by-state) and analog time behavior</cell><cell>+</cell><cell>+</cell></row><row><cell>some real components</cell><cell>Validation of system cybersecurity (all properties)</cell><cell>+</cell><cell>±</cell></row><row><cell></cell><cell>Staff training</cell><cell>+</cell><cell>+</cell></row><row><cell>a</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 .</head><label>2</label><figDesc>The principles of CPS digital twin design.</figDesc><table><row><cell></cell><cell>Physical Object</cell><cell>Controllers/Sensors</cell><cell>Software</cell></row><row><cell>Type of model</cell><cell>analytical (equations)</cell><cell>emulation; black-box software models</cell><cell>-</cell></row><row><cell>Representation of time</cell><cell>an abstraction: an argument of the equations</cell><cell>tick counter (hardware dependent)</cell><cell>tick counter (hardware dependent)</cell></row><row><cell></cell><cell>the equations are solved</cell><cell></cell><cell></cell></row><row><cell>Implementation within a</cell><cell>separately; the twin uses the</cell><cell>a piece of software running on</cell><cell>a piece of software running on</cell></row><row><cell>digital twin</cell><cell>results and can approximate</cell><cell>a real or virtual computer</cell><cell>a real or virtual computer</cell></row><row><cell></cell><cell>them</cell><cell></cell><cell></cell></row><row><cell>Technologies</cell><cell>numerical simulation, clusters, supercomputers</cell><cell>emulation, simulation</cell><cell>virtualization, cloud computing</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 .</head><label>3</label><figDesc>The I&amp;C lifecycle stages and corresponding scenarios of using the digital twin. Generate and check a consistent set of I&amp;C system requirements 2. Build a top-down structural representation of the system architecture. The mathematical structures are used to model relations between I&amp;C system components 3. Facilitate the top to down design using classification mathematical methods Check the modification effect on functionality, performance, and safety before applying modification to the I&amp;C system 2. Model system upgrade effects on performance and safety 3. Perform the tests of system upgrade before the deployment 4. Investigate security and safety incidents or identified vulnerabilities and weakness and recommend corrective actions</figDesc><table><row><cell>Lifecycle Stage</cell><cell>Application of the Digital Twin</cell></row><row><cell cols="2">System requirements specification 1. System specification 1. The I&amp;C system architecture is partitioned into some interconnected subsystems and components, which are combined into logical zones. That arrangement shall comply with safety and security classification</cell></row><row><cell></cell><cell>2. Model relations between I&amp;C subsystem and components</cell></row><row><cell></cell><cell>1. Elaborate the possible data communication paths</cell></row><row><cell></cell><cell>2. Develop scenarios for physical and logical access to I&amp;C assets</cell></row><row><cell>System detailed design and implementation</cell><cell>3. Identify interfaces between I&amp;C system and plant devices</cell></row><row><cell></cell><cell>4. Generate preliminary data used for risk assessment</cell></row><row><cell></cell><cell>5. Identify logical boundaries of system components</cell></row><row><cell>System integration</cell><cell>1. Check that normal information path not conflicted with safety and security requirements</cell></row><row><cell>System validation</cell><cell>1. Generate test cases used for system validation</cell></row><row><cell>System installation</cell><cell>1. Generate deployment scenarios and check installation procedures 2. Train the personal</cell></row><row><cell cols="2">Operation and maintenance 1. Retirement activities 1. Generate the I&amp;C system retirement scenarios</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4 .</head><label>4</label><figDesc>Real computer parameters.</figDesc><table><row><cell>Parameter</cell><cell>Host Server</cell><cell>Workstation</cell></row><row><cell>CPU</cell><cell>Intel Xeon Silver 2.2 GHz: 2 nodes, 40 logical CPUs</cell><cell>Intel Core i7 2 GHz: 1 node, 8 logical CPUs</cell></row><row><cell>RAM</cell><cell>128 Gb</cell><cell>16 Gb</cell></row><row><cell>Storage</cell><cell>300 Gb disk drive 7 Tb disk array</cell><cell>500 Gb disk drive</cell></row><row><cell>Network interface card</cell><cell>Ethernet, 100/1000 Mbit/s, 8 devices</cell><cell>Ethernet, 100/1000 Mbit/s, 4 devices</cell></row><row><cell>Video controller</cell><cell>insignificant for the model</cell><cell>Intel HD530</cell></row><row><cell>Display</cell><cell>insignificant for the model</cell><cell>two displays working as a single logical screen, display working mode: 1920 × 1080</cell></row><row><cell>Operation system</cell><cell>LICS OS</cell><cell>LICS OS</cell></row><row><cell>Hypervisor</cell><cell>QEMU/KVM</cell><cell>not used</cell></row><row><cell>Network emulation tools</cell><cell>OpenVSwitch</cell><cell>not used</cell></row><row><cell>Model control and deployment tools</cell><cell>libvirt [29] ansible [30]</cell><cell>not used</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 5 .</head><label>5</label><figDesc>Parameters of virtual components.</figDesc><table><row><cell>Parameter</cell><cell>Virtual Server</cell><cell>Virtual Workstation</cell></row><row><cell>CPU</cell><cell>4 virtual CPUs of x86_64 architecture</cell><cell>1-2 virtual CPUs of x86_64 architecture</cell></row><row><cell>System clock driver</cell><cell>TSC clock</cell><cell>TSC clock</cell></row><row><cell>RAM</cell><cell>4-6 Gb (depends on the machine role)</cell><cell>2-3 Gb (depends on the machine role)</cell></row><row><cell>Storage</cell><cell>100 Gb paravirtual disk drive</cell><cell>100 Gb disk drive (SATA emulation)</cell></row><row><cell>Network interface card</cell><cell>2-4 paravirtual Ethernet adapters</cell><cell>2-4 paravirtual Ethernet adapters</cell></row><row><cell>Video controller</cell><cell>insignificant for the model</cell><cell>dual head virtual QXL graphics adapter</cell></row><row><cell>Display</cell><cell>insignificant for the model</cell><cell>SPICE client allows sending video to hardware displays via SPICE protocol</cell></row><row><cell>Operation system</cell><cell>LICS OS</cell><cell>LICS OS</cell></row><row><cell>Model configuration and deployment tools</cell><cell>ansible</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head></head><label></label><figDesc>Now let us show the implementation of the presented topology within the digital model. Virtual machines VS1, VS2, VW correspond to the real machines S1, S2, W, virtual switches VSM1, VSM2, VSS1, and VSS2 implemented as OpenVSwitch instances correspond to the hardware Ethernet switches SM1, SM2, SS1, and SS2, respectively. The A fragment of the real ULCS network topology.</figDesc><table><row><cell cols="3">Figure 6. Machines 2021, 9, x FOR PEER REVIEW Figures 6</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Main network</cell></row><row><cell>VS1</cell><cell>VS2</cell><cell>VW</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Host NIC main</cell></row><row><cell>VSM 1</cell><cell>VLAN10</cell><cell>VSM 2</cell><cell></cell><cell>network</cell></row><row><cell></cell><cell></cell><cell></cell><cell>VLAN10</cell><cell>Host service virtual</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>switch</cell></row><row><cell>VSS 1</cell><cell>VLAN20</cell><cell>VSS 2</cell><cell>VLAN20</cell><cell>Host NIC</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>standby</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>network</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Standby network</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>Now let us show the implementation of the presented topology within the digital model. Virtual machines VS1, VS2, VW correspond to the real machines S1, S2, W, virtual switches VSM1, VSM2, VSS1, and VSS2 implemented as OpenVSwitch instances correspond to the hardware Ethernet switches SM1, SM2, SS1, and SS2, respectively. The</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Main network</cell></row><row><cell>VS1</cell><cell>VS2</cell><cell>VW</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Host NIC main</cell></row><row><cell>VSM 1</cell><cell>VLAN10</cell><cell>VSM 2</cell><cell></cell><cell>network</cell></row><row><cell></cell><cell></cell><cell></cell><cell>VLAN10</cell><cell>Host service virtual</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>switch</cell></row><row><cell>VSS 1</cell><cell>VLAN20</cell><cell>VSS 2</cell><cell>VLAN20</cell><cell>Host NIC</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>standby</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>network</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Standby network</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments: We are grateful to A. S. Shumov and I. U. Sakhabetdinov for the technical assistance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conflicts of Interest:</head><p>The authors declare no conflict of interest.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Author Contributions: Conceptualization and digital twin architecture, A.P.; methodology, A.P. and N.M.; technical implementation support, N.M. and V.P.; software interfaces and configuration management system, K.S.; validation scenarios development and formal analysis, V.P.; investigation, V.P., K.S., and N.M.; writing-original draft preparation, K.S. and N.M.; writing-review and editing, V.P. and A.P. All authors have read and agreed to the published version of the manuscript.</p><p>Funding: The reported study was partially (Sections 3 and 4) funded by RFBR, project number 19-29-06044.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Industrie 4.0: Mit dem Internet der Dinge auf dem Weg zur 4. industriellen Revolution. VDI Nachr</title>
		<author>
			<persName><forename type="first">H</forename><surname>Kagermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W.-D</forename><surname>Lukas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Wahlster</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="2" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Design Principles for Industrie 4.0 Scenarios</title>
		<author>
			<persName><forename type="first">Mario</forename><surname>Hermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tobias</forename><surname>Pentek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Boris</forename><surname>Otto</surname></persName>
		</author>
		<idno type="DOI">10.1109/hicss.2016.488</idno>
		<ptr target="https://www.researchgate.net/publication/307864150_Design_Principles_for_Industrie_40_Scenarios_A_Literature_Review" />
	</analytic>
	<monogr>
		<title level="m">2016 49th Hawaii International Conference on System Sciences (HICSS)</title>
				<meeting><address><addrLine>Koloa, HI, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016-01" />
			<biblScope unit="page">27</biblScope>
		</imprint>
	</monogr>
	<note>Available online. CrossRef</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Chancen von Industrie 4.0 nutzen</title>
		<author>
			<persName><forename type="first">Henning</forename><surname>Kagermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Wahlster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Helbig</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-662-53254-6_12</idno>
	</analytic>
	<monogr>
		<title level="m">Handbuch Industrie 4.0 Bd.4</title>
				<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer Berlin Heidelberg</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="237" to="248" />
		</imprint>
	</monogr>
	<note>final report of the Industrie 4.0 working group</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Maturity Model for Assessing Industry 4.0 Readiness and Maturity of Manufacturing Enterprises</title>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Schumacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Selim</forename><surname>Erol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wilfried</forename><surname>Sihn</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.procir.2016.07.040</idno>
	</analytic>
	<monogr>
		<title level="j">Procedia CIRP</title>
		<title level="j" type="abbrev">Procedia CIRP</title>
		<idno type="ISSN">2212-8271</idno>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="page" from="161" to="166" />
			<date type="published" when="2016" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Intelligent Manufacturing in the Context of Industry 4.0: A Review</title>
		<author>
			<persName><forename type="first">Ray</forename><forename type="middle">Y</forename><surname>Zhong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xun</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eberhard</forename><surname>Klotz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stephen</forename><forename type="middle">T</forename><surname>Newman</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.eng.2017.05.015</idno>
	</analytic>
	<monogr>
		<title level="j">Engineering</title>
		<title level="j" type="abbrev">Engineering</title>
		<idno type="ISSN">2095-8099</idno>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="616" to="630" />
			<date type="published" when="2017-10" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">What Are Digital Twins?</title>
		<author>
			<persName><forename type="first">H</forename><surname>Stanford-Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Frank-Schultz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Harris</surname></persName>
		</author>
		<ptr target="https://developer.ibm.com/technologies/iot/articles/what-are-digital-twins" />
		<imprint>
			<date type="published" when="2019-02" />
			<biblScope unit="page">25</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Industry Digitalisation, Digital Twins in Industrial Applications</title>
		<idno type="DOI">10.1109/indin45582.2020.9442195</idno>
		<ptr target="https://www.iiconsortium.org/pdf/IIC_Digital_Twins_Industrial_Apps_White_Paper_2020-02-18.pdf" />
	</analytic>
	<monogr>
		<title level="m">2020 IEEE 18th International Conference on Industrial Informatics (INDIN)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2020-07-20" />
			<biblScope unit="page">25</biblScope>
		</imprint>
	</monogr>
	<note>v. 1.0. 2020. Available online</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">cloud.iO, An Open-source W3C WoT Compliant Framework</title>
		<author>
			<persName><forename type="first">Lucas</forename><surname>Bonvin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dominique</forename><surname>Gabioud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Clausen</surname></persName>
		</author>
		<idno type="DOI">10.5220/0009470604050411</idno>
		<ptr target="https://www.w3.org/TR/2020" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th International Conference on Internet of Things, Big Data and Security</title>
				<meeting>the 5th International Conference on Internet of Things, Big Data and Security</meeting>
		<imprint>
			<publisher>SCITEPRESS - Science and Technology Publications</publisher>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Digital twin driven prognostics and health management for complex equipment</title>
		<author>
			<persName><forename type="first">Fei</forename><surname>Tao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Meng</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yushan</forename><surname>Liu</surname></persName>
			<idno type="ORCID">0000-0002-2799-9542</idno>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">Y C</forename><surname>Nee</surname></persName>
			<idno type="ORCID">0000-0002-1029-9988</idno>
		</author>
		<idno type="DOI">10.1016/j.cirp.2018.04.055</idno>
	</analytic>
	<monogr>
		<title level="j">CIRP Annals</title>
		<title level="j" type="abbrev">CIRP Annals</title>
		<idno type="ISSN">0007-8506</idno>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="169" to="172" />
			<date type="published" when="2018" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The new generation of upper levels systems and industry 4.0 conception in NPP APCS</title>
		<author>
			<persName><forename type="first">Alexey</forename><surname>Poletykin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elena</forename><surname>Jharko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nadir</forename><surname>Mengazetdinov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vitaly</forename><surname>Promyslov</surname></persName>
		</author>
		<idno type="DOI">10.1109/mlsd.2017.8109670</idno>
	</analytic>
	<monogr>
		<title level="m">2017 Tenth International Conference Management of Large-Scale System Development (MLSD)</title>
				<meeting><address><addrLine>Moscow, Russia</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017-10" />
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Experience from design and application of the top-level system of the process control system of nuclear power-plant</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Byvaikov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">F</forename><surname>Zharko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">E</forename><surname>Mengazetdinov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">G</forename><surname>Poletykin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">V</forename><surname>Prangishvili</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">G</forename><surname>Promyslov</surname></persName>
		</author>
		<idno type="DOI">10.1134/s0005117906050067</idno>
	</analytic>
	<monogr>
		<title level="j">Automation and Remote Control</title>
		<title level="j" type="abbrev">Autom Remote Control</title>
		<idno type="ISSN">0005-1179</idno>
		<idno type="ISSNe">1608-3032</idno>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="735" to="747" />
			<date type="published" when="2006-05" />
			<publisher>Pleiades Publishing Ltd</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Verification of Large Scale Control Systems with Hybrid Digital Models and Digital Twins</title>
		<author>
			<persName><forename type="first">Kirill</forename><surname>Semenkov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vitaly</forename><surname>Promyslov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexey</forename><surname>Poletykin</surname></persName>
		</author>
		<idno type="DOI">10.1109/rusautocon49822.2020.9208167</idno>
	</analytic>
	<monogr>
		<title level="m">2020 International Russian Automation Conference (RusAutoCon)</title>
				<meeting><address><addrLine>Sochi, Russia</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2020-09" />
			<biblScope unit="page" from="325" to="329" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Problems of Evaluation of Software Dependability and Quality in Industrial Automation and Control Systems</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Antonov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">F</forename><surname>Zharko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">G</forename><surname>Promyslov</surname></persName>
		</author>
		<idno type="DOI">10.21683/1729-2646-2015-0-4-87-96</idno>
		<ptr target="https://www.dependability.ru/jour/article/download/107/288" />
		<imprint>
			<date type="published" when="2015-03" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">13</biblScope>
		</imprint>
	</monogr>
	<note>CrossRef</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Systems and software engineering. Systems and software quality requirements and evaluation (SQuaRE). System and software quality models</title>
		<author>
			<persName><surname>Iso/Iec</surname></persName>
		</author>
		<author>
			<persName><surname>Standard</surname></persName>
		</author>
		<idno type="DOI">10.3403/30215101u</idno>
	</analytic>
	<monogr>
		<title level="m">Systems and Software Engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality Models&quot;; International Organization for Standardization</title>
				<meeting><address><addrLine>Geneva, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>BSI British Standards</publisher>
			<date>2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Control System Availability Assessment Via Maximum Delay Calculation</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Baybulatov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">G</forename><surname>Promyslov</surname></persName>
		</author>
		<idno type="DOI">10.1109/icieam.2019.8743012</idno>
	</analytic>
	<monogr>
		<title level="m">2019 International Conference on Industrial Engineering, Applications and Manufacturing (ICIEAM)</title>
				<meeting><address><addrLine>Sochi, Russia</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019-03" />
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Verification of the FAIR Control System Using Deterministic Network Calculus</title>
		<author>
			<persName><forename type="first">M</forename><surname>Schütze</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Bondorf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kreider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th International Conference on Accelerator and Large Experimental Control Systems (ICALEPCS 2017)</title>
				<meeting>the 16th International Conference on Accelerator and Large Experimental Control Systems (ICALEPCS 2017)<address><addrLine>Barcelona, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-10" />
			<biblScope unit="page" from="8" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">I</forename><surname>Costa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fernández</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ó</forename><surname>Matilla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">R W</forename><surname>Schaa</surname></persName>
		</author>
		<idno type="DOI">10.18429/JACoW-ICALEPCS2017-TUCPL06</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>JACoW</publisher>
			<biblScope unit="page" from="238" to="245" />
			<pubPlace>Geneva, Switzerland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An isolated virtual cluster for SCADA network security research</title>
		<author>
			<persName><forename type="first">A</forename><surname>Lemay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Fernandez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Knight</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First International Symposium for ICS &amp; SCADA Cyber Security (ICS-CSR 2013)</title>
				<meeting>the First International Symposium for ICS &amp; SCADA Cyber Security (ICS-CSR 2013)<address><addrLine>Leicester, UK; Swindon, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-09" />
			<biblScope unit="page" from="88" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Virtualization of SCADA testbeds for cybersecurity research: A modular approach</title>
		<author>
			<persName><forename type="first">Thiago</forename><surname>Alves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rishabh</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aaron</forename><surname>Werth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Morris</surname></persName>
			<idno type="ORCID">0000-0002-4854-5419</idno>
		</author>
		<idno type="DOI">10.1016/j.cose.2018.05.002</idno>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Security</title>
		<title level="j" type="abbrev">Computers &amp; Security</title>
		<idno type="ISSN">0167-4048</idno>
		<imprint>
			<biblScope unit="volume">77</biblScope>
			<biblScope unit="page" from="531" to="546" />
			<date type="published" when="2018-08" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">An introductory textbook on cyber-physical systems</title>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">A</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sanjit</forename><forename type="middle">A</forename><surname>Seshia</surname></persName>
		</author>
		<idno type="DOI">10.1145/1930277.1930278</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 Workshop on Embedded Systems Education - WESE &apos;10</title>
				<meeting>the 2010 Workshop on Embedded Systems Education - WESE &apos;10<address><addrLine>Cambridge, MA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Installing VMware App Volumes</title>
		<author>
			<persName><forename type="first">Peter</forename><surname>Von Oven</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4842-6689-2_2</idno>
		<ptr target="https://www.vmware.com/content/dam/digitalmarketing/vmware/en/pdf/techpaper/Timekeeping-In-VirtualMachines.pdf" />
	</analytic>
	<monogr>
		<title level="m">Delivering Applications with VMware App Volumes 4</title>
				<imprint>
			<publisher>Apress</publisher>
			<date type="published" when="2021" />
			<biblScope unit="page" from="31" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Simulação com hardware in the loop aplicada a veículos submarinos semi-autônomos.</title>
		<author>
			<persName><forename type="first">Hilgad</forename><forename type="middle">Montelo Da</forename><surname>Silva</surname></persName>
		</author>
		<idno type="DOI">10.11606/d.3.2008.tde-09022009-164239</idno>
		<ptr target="https://www.ni.com/en-us/innovations/white-papers/17/what-is-hardware-in-the-loop-.html" />
	</analytic>
	<monogr>
		<title level="m">National Instruments. What Is Hardware-In-The-Loop? White Paper</title>
				<imprint>
			<publisher>Universidade de Sao Paulo, Agencia USP de Gestao da Informacao Academica (AGUIA)</publisher>
			<date>17 December 2020. February 2021</date>
			<biblScope unit="page">25</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">What Is Hardware-In-The-Loop Simulation? Mathlab Documentation</title>
		<author>
			<persName><surname>Mathworks</surname></persName>
		</author>
		<ptr target="https://www.mathworks.com/help/physmod/simscape/ug/what-is-hardware-in-the-loop-simulation.html" />
		<imprint>
			<date type="published" when="2021-02" />
			<biblScope unit="page">25</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Enterprise-control system integration</title>
		<idno type="DOI">10.3403/30149780u</idno>
		<idno>IEC. IEC Standard 62264-3:2016</idno>
		<imprint>
			<date>2016</date>
			<publisher>BSI British Standards</publisher>
			<pubPlace>Geneva, Switzerland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">IEEE Guide:--Adoption of ISO/IEC TR 24748-3:2011, Systems and software engineering-Life cycle management-Part 3: Guide to the application of ISO/IEC 12207 (Software life cycle processes)</title>
		<idno type="DOI">10.1109/ieeestd.2012.6189321</idno>
		<idno>ISO/IEC. ISO/IEC TR 19759</idno>
	</analytic>
	<monogr>
		<title level="m">Software Engineering-Guide to the Software Engineering Body of Knowledge (SWEBOK)</title>
				<meeting><address><addrLine>Geneva, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date>2015. 2016</date>
			<biblScope unit="page">336</biblScope>
		</imprint>
	</monogr>
	<note>2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Early titles available online</title>
		<idno type="DOI">10.1108/ilds.1999.12227aab.010</idno>
		<ptr target="https://www1.fips.ru/publication-web/publications/document?type=" />
	</analytic>
	<monogr>
		<title level="j">Interlending &amp; Document Supply</title>
		<title level="j" type="abbrev">Interlending &amp; Document Supply</title>
		<idno type="ISSN">0264-1615</idno>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">27</biblScope>
			<date type="published" when="1999-03" />
			<publisher>Emerald</publisher>
		</imprint>
	</monogr>
	<note>LICS Registration Certificate</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title/>
		<author>
			<persName><surname>Kvm Documentation</surname></persName>
		</author>
		<ptr target="https://www.linux-kvm.org/page/Documents" />
		<imprint>
			<date type="published" when="2021-01" />
			<biblScope unit="page">27</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">DOCKER MANAGEMENT USING LIBVIRT API</title>
		<idno type="DOI">10.21090/ijaerd.030252</idno>
		<ptr target="https://libvirt.org/" />
	</analytic>
	<monogr>
		<title level="j">International Journal of Advance Engineering and Research Development</title>
		<title level="j" type="abbrev">IJAERD</title>
		<idno type="ISSN">2348-6406</idno>
		<idno type="ISSNe">2348-4470</idno>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">02</biblScope>
			<biblScope unit="page">27</biblScope>
			<date type="published" when="2016-02-29" />
			<publisher>International Journal of Advance Engineering and Research Development (IJAERD)</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Redhat</forename><surname>Ansible</surname></persName>
		</author>
		<ptr target="https://www.ansible.com/" />
		<imprint>
			<date type="published" when="2021-01" />
			<biblScope unit="page">27</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title/>
		<author>
			<persName><surname>Openvswitch</surname></persName>
		</author>
		<ptr target="https://www.openvswitch.org/" />
		<imprint>
			<date type="published" when="2021-01" />
			<biblScope unit="page">27</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Extending Operation Lifespan of Instrumentation and Control Systems with Virtualization Technologies</title>
		<author>
			<persName><forename type="first">Kirill</forename><surname>Semenkov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nadir</forename><surname>Mengazetdinov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aleksey</forename><surname>Poletykin</surname></persName>
		</author>
		<idno type="DOI">10.1109/rusautocon.2019.8867595</idno>
	</analytic>
	<monogr>
		<title level="m">2019 International Russian Automation Conference (RusAutoCon)</title>
				<meeting><address><addrLine>Sochi, Russia</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019-09" />
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Automation Using PowerShell</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Goto</surname></persName>
		</author>
		<idno type="DOI">10.1002/9781118257432.ch8</idno>
	</analytic>
	<monogr>
		<title level="m">Mastering</title>
				<imprint>
			<publisher>Wiley Publishing, Inc.</publisher>
			<date type="published" when="2011-11-03" />
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="page" from="327" to="368" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Computer Network Time Synchronization</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">L</forename><surname>Mills</surname></persName>
		</author>
		<idno type="DOI">10.1201/b10282</idno>
	</analytic>
	<monogr>
		<title level="m">The Network Time Protocol on Earth and in Space</title>
				<meeting><address><addrLine>Boca Raton, FL, USA</addrLine></address></meeting>
		<imprint>
			<publisher>CRC Press</publisher>
			<date type="published" when="2017-12-19" />
		</imprint>
	</monogr>
	<note>2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Time Synchronization in Virtual Machines</title>
		<author>
			<persName><forename type="first">M</forename><surname>Burnicki</surname></persName>
		</author>
		<ptr target="https://kb.meinbergglobal.com/kb/time_sync/time_synchronization_in_virtual_machines" />
		<imprint>
			<date type="published" when="2021-01" />
			<biblScope unit="page">27</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title/>
		<author>
			<persName><surname>Kvm Guest Timing</surname></persName>
		</author>
		<author>
			<persName><surname>Management</surname></persName>
		</author>
		<ptr target="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/chap-kvm_guest_timing_management" />
		<imprint>
			<date type="published" when="2021-01" />
			<biblScope unit="page">27</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
